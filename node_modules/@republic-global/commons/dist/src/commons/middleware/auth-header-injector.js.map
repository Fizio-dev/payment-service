{"version":3,"file":"auth-header-injector.js","sourceRoot":"","sources":["../../../../src/commons/middleware/auth-header-injector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEzD,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;AAE9D,2BAA2B;AAC3B,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,WAAwB,EAAe,EAAE;IACxE,MAAM,GAAG,GAAG,iBAAiB,EAAE,CAAC;IAChC,IAAI,GAAG,EAAE,CAAC;QACN,MAAM,CAAC,KAAK,CACR,6CAA6C,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CACnE,CAAC;QACF,OAAO;YACH,GAAG,WAAW;YACd,OAAO,EAAE,CAAC,CAAC,eAAe,EAAE,UAAU,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;SAC/D,CAAC;IACN,CAAC;IACD,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import { LoggerFactory } from '../utils/index.js';\nimport { getRequestContext } from './request-context.js';\n\nconst logger = LoggerFactory.getLogger('FetchAuthMiddleware');\n\n// TODO ensure this is safe\nexport const authHeaderInjector = (requestInit: RequestInit): RequestInit => {\n    const ctx = getRequestContext();\n    if (ctx) {\n        logger.debug(\n            `TEMP: OpenAPI Middleware invoked for user ${ctx.user.username}`\n        );\n        return {\n            ...requestInit,\n            headers: [['Authorization', `Bearer ${ctx.authInfo.token}`]],\n        };\n    }\n    return requestInit;\n};\n"]}