{"version":3,"file":"commons.work.service.js","sourceRoot":"","sources":["../../../../src/commons/services/commons.work.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    OpenAPI,\n    type WorkDetailsResponse,\n    postWorkDetailsList,\n} from '@republic-global/work-client';\n\nimport { commonsConfig } from '../commons-config.js';\nimport { authHeaderInjector, headerInjector } from '../middleware/index.js';\nimport { LoggerFactory } from '../utils/index.js';\nimport { CacheService } from './cache.service.js';\nimport { SharedCacheKeys } from './shared-cache-keys.js';\n\nconst workConfig = commonsConfig.services.work;\n\nexport class CommonsWorkService {\n    private readonly logger = LoggerFactory.getLogger('CommonsWorkService');\n\n    constructor(private readonly cacheService: CacheService) {\n        OpenAPI.BASE = workConfig.baseUrl;\n        OpenAPI.interceptors.request.use(authHeaderInjector);\n        OpenAPI.interceptors.request.use(headerInjector);\n    }\n\n    public async getWorkDetails(\n        workIds: string[]\n    ): Promise<WorkDetailsResponse[]> {\n        this.logger.debug(`Getting details for workIds: ${workIds}`);\n\n        if (!workIds.length) {\n            return [];\n        }\n\n        // Retrieving work from cache\n        const cachedWork = await this.cacheService.getHashFieldValues(\n            SharedCacheKeys.workRecordsHash,\n            workIds\n        );\n\n        // Filter out workIds that were not found in the cache\n        // Redis returns values in the same order they were requested\n        const missingWorkIds = workIds.filter(\n            (_id, index) => cachedWork[index] === null\n        );\n\n        const missingWorkDetails =\n            await this.retrieveWorkDetailsAndCache(missingWorkIds);\n\n        // Concatenating cached work and missing work\n        return cachedWork\n            .filter((buffer): buffer is Buffer => buffer !== null)\n            .map(\n                (buffer) => JSON.parse(buffer.toString()) as WorkDetailsResponse\n            )\n            .concat(missingWorkDetails);\n    }\n\n    private async retrieveWorkDetailsAndCache(\n        workIds: string[]\n    ): Promise<WorkDetailsResponse[]> {\n        if (workIds.length) {\n            this.logger.debug(\n                `Retrieving work details from work service: ${workIds}`\n            );\n\n            // Retrieving from service\n            const retrievedWork = await postWorkDetailsList({\n                requestBody: { workIds: workIds },\n            });\n\n            // Save to cache\n            if (\n                retrievedWork.workDetailsList &&\n                retrievedWork.workDetailsList.length\n            ) {\n                const workDetailsMap = new Map<string, Buffer>(\n                    retrievedWork.workDetailsList.map((work) => [\n                        work.workId!,\n                        Buffer.from(JSON.stringify(work)),\n                    ])\n                );\n\n                await this.cacheService.setHashFieldValues(\n                    SharedCacheKeys.workRecordsHash,\n                    workDetailsMap\n                );\n\n                return retrievedWork.workDetailsList;\n            }\n        }\n        return [];\n    }\n}\n"]}