{"version":3,"file":"presence.service.js","sourceRoot":"","sources":["../../../../src/commons/services/presence.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAE7C,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AAGlD,IAAM,eAAe,GAArB,MAAM,eAAe;IAGH;IAFrB,YAEqB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAC5C,CAAC;IAEG,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,QAAgB;QACjD,MAAM,eAAe,GACjB,IAAI,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC,kBAAkB,GAAG,IAAI,CAAC;QACzD,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAClC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,EACvC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EACrB,eAAe,CAClB,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,IAAY,EAAE,QAAgB;QAClD,MAAM,IAAI,CAAC,YAAY,CAAC,mBAAmB,CACvC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,EACvC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CACxB,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,cAAc,CACvB,KAAe;QAEf,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC9D,KAAK;iBACA,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;iBACtD,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClB,IAAI,CAAC,YAAY,CAAC,mCAAmC,CACjD,QAAQ,EACR,YAAY,CAAC,GAAG,EAChB,GAAG,GAAG,aAAa,CAAC,kBAAkB,GAAG,IAAI,CAChD,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,wCAAwC,CACtD,QAAQ,EACR,GAAG,EACH,YAAY,CAAC,GAAG,EAChB,QAAQ,CACX,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,IAAI,cAAc,EAAE,CAAC;YACjB,OAAO,KAAK,CAAC,MAAM,CACf,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;gBACjB,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACzC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;gBAC/C,OAAO,GAAG,CAAC;YACf,CAAC,EACD,EAA6B,CAChC,CAAC;QACN,CAAC;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAEO,QAAQ,CAAC,KAAiC;QAC9C,OAAO,CAAC,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC;IAChD,CAAC;CACJ,CAAA;AA7DY,eAAe;IAD3B,SAAS,EAAE;IAGH,WAAA,MAAM,CAAC,YAAY,CAAC,CAAA;qCACU,YAAY;GAHtC,eAAe,CA6D3B","sourcesContent":["import { inject, singleton } from 'tsyringe';\n\nimport { commonsConfig } from '../commons-config.js';\nimport { CacheService } from './cache.service.js';\nimport { SharedCacheKeys } from './shared-cache-keys.js';\n\n@singleton()\nexport class PresenceService {\n    constructor(\n        @inject(CacheService)\n        private readonly cacheService: CacheService\n    ) {}\n\n    public async setOnline(ccId: string, socketId: string): Promise<void> {\n        const expiryTimestamp =\n            Date.now() + commonsConfig.presenceTTLSeconds * 1000;\n        await this.cacheService.addToSortedSet(\n            SharedCacheKeys.onlineUserSockets(ccId),\n            Buffer.from(socketId),\n            expiryTimestamp\n        );\n    }\n\n    public async setOffline(ccId: string, socketId: string): Promise<void> {\n        await this.cacheService.removeFromSortedSet(\n            SharedCacheKeys.onlineUserSockets(ccId),\n            Buffer.from(socketId)\n        );\n    }\n\n    public async areUsersOnline(\n        ccIds: string[]\n    ): Promise<Record<string, boolean>> {\n        const now = Date.now();\n\n        const pipelineResult = await this.cacheService.multi((pipeline) => {\n            ccIds\n                .map((ccId) => SharedCacheKeys.onlineUserSockets(ccId))\n                .forEach((cacheKey) => {\n                    this.cacheService.removeFromSortedSetWithScoreBetween(\n                        cacheKey,\n                        CacheService.MIN,\n                        now - commonsConfig.presenceTTLSeconds * 1000\n                    );\n                    this.cacheService.countElementsInSortedSetWithScoreBetween(\n                        cacheKey,\n                        now,\n                        CacheService.MAX,\n                        pipeline\n                    );\n                });\n        });\n        if (pipelineResult) {\n            return ccIds.reduce(\n                (map, ccId, index) => {\n                    const value = pipelineResult[index]?.[1];\n                    map[ccId] = this.isNumber(value) && value >= 1;\n                    return map;\n                },\n                {} as Record<string, boolean>\n            );\n        }\n        return {};\n    }\n\n    private isNumber(value: unknown | null | undefined): value is number {\n        return !!value && typeof value === 'number';\n    }\n}\n"]}