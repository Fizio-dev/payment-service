{"version":3,"file":"commons.party.service.js","sourceRoot":"","sources":["../../../../src/commons/services/commons.party.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    type BaseParty,\n    OpenAPI,\n    type PartyCraftsListItem,\n    type PostPartyCraftspersonListData,\n    getPartyById,\n    postPartyCraftspersonList,\n    postPartyPartyList,\n} from '@republic-global/party-client';\n\nimport { commonsConfig } from '../commons-config.js';\nimport {\n    headerInjector,\n    serviceAccountAuthHeaderInjector,\n} from '../middleware/index.js';\nimport { LoggerFactory } from '../utils/index.js';\nimport { CacheService } from './cache.service.js';\nimport { SharedCacheKeys } from './shared-cache-keys.js';\n\nconst partyConfig = commonsConfig.services.party;\n\nexport class CommonsPartyService {\n    private readonly logger = LoggerFactory.getLogger('CommonsPartyService');\n\n    constructor(private readonly cacheService: CacheService) {\n        OpenAPI.BASE = partyConfig.baseUrl;\n        OpenAPI.interceptors.request.use(serviceAccountAuthHeaderInjector);\n        OpenAPI.interceptors.request.use(headerInjector);\n    }\n\n    public async getCraftspeopleDetails(\n        craftspersonCcIds: string[]\n    ): Promise<PartyCraftsListItem[]> {\n        this.logger.info(\n            `Getting details for craftspeople with ids ${craftspersonCcIds}`\n        );\n\n        if (!craftspersonCcIds.length) {\n            return [];\n        }\n\n        const cachedCraftspeople = await this.cacheService.getHashFieldValues(\n            SharedCacheKeys.craftspeopleRecordsHash,\n            craftspersonCcIds\n        );\n\n        // Filtering out ccId that were not found in the cache\n        // Redis returns values in the same order they were requested\n        const missingCcIds = craftspersonCcIds.filter(\n            (_id, index) => cachedCraftspeople[index] === null\n        );\n\n        const missingCraftspeople =\n            await this.retrieveCraftspeopleAndCache(missingCcIds);\n\n        // Concatenating cached and retrieved craftspeople\n        return cachedCraftspeople\n            .filter((buffer): buffer is Buffer => buffer !== null)\n            .map(\n                (buffer) => JSON.parse(buffer.toString()) as PartyCraftsListItem\n            )\n            .concat(missingCraftspeople);\n    }\n\n    public async getParty(partyCcId: string): Promise<BaseParty> {\n        const partyBuffer = await this.cacheService.getHashFieldValue(\n            SharedCacheKeys.partyRecordsHash,\n            partyCcId\n        );\n        let party: BaseParty;\n        if (partyBuffer) {\n            party = JSON.parse(partyBuffer.toString());\n        } else {\n            party = await getPartyById({ id: partyCcId });\n            await this.cacheService.setHashFieldValue(\n                SharedCacheKeys.partyRecordsHash,\n                partyCcId,\n                Buffer.from(JSON.stringify(party))\n            );\n        }\n        return party;\n    }\n\n    public async retrieveParties(ccIds: string[]): Promise<BaseParty[]> {\n        this.logger.debug(`Retrieving parties for ccIds: ${ccIds}`);\n\n        if (ccIds.length) {\n            const cachedParties = await this.cacheService.getHashFieldValues(\n                SharedCacheKeys.partyRecordsHash,\n                ccIds\n            );\n            // Filtering out ccId that were not found in the cache\n            // Redis returns values in the same order they were requested\n            const missingCcIds = ccIds.filter(\n                (_id, index) => cachedParties[index] === null\n            );\n            const missingParties =\n                await this.retrievePartiesAndCache(missingCcIds);\n\n            this.logger.debug(\n                `Retrieved missing parties ${missingParties.length}`\n            );\n            // Concatenating cached and retrieved craftspeople\n            const allParties = cachedParties\n                .filter((buffer): buffer is Buffer => buffer !== null)\n                .map((buffer) => JSON.parse(buffer.toString()) as BaseParty)\n                .concat(missingParties);\n            this.logger.debug(`Final party response: ${allParties.length}`);\n            return allParties;\n        }\n\n        return [];\n    }\n\n    private async retrievePartiesAndCache(\n        ccIds: string[]\n    ): Promise<BaseParty[]> {\n        if (ccIds.length) {\n            this.logger.debug(`Retrieving parties ${ccIds} from party service`);\n            // Retrieve from service\n            const partyResponse: BaseParty[] = await postPartyPartyList({\n                requestBody: { ccIds: ccIds },\n            });\n            this.logger.debug(\n                `Response from party service: ${JSON.stringify(partyResponse)}`\n            );\n            // Save to cache\n            if (partyResponse?.length) {\n                await this.cacheService.setHashFieldValues(\n                    SharedCacheKeys.partyRecordsHash,\n                    new Map<string, Buffer>(\n                        partyResponse.map((party) => [\n                            party.ccId!,\n                            Buffer.from(JSON.stringify(party)),\n                        ])\n                    )\n                );\n                return partyResponse;\n            }\n        }\n        return [];\n    }\n\n    private async retrieveCraftspeopleAndCache(\n        ccIds: string[]\n    ): Promise<PartyCraftsListItem[]> {\n        if (ccIds.length) {\n            const body: PostPartyCraftspersonListData = {\n                requestBody: {\n                    ccIds: ccIds,\n                },\n            };\n\n            // Retrieve from service\n            const craftspeopleResponse = await postPartyCraftspersonList(body);\n            // Save to cache\n            if (\n                craftspeopleResponse.records &&\n                craftspeopleResponse.records.length\n            ) {\n                await this.cacheService.setHashFieldValues(\n                    SharedCacheKeys.craftspeopleRecordsHash,\n                    new Map<string, Buffer>(\n                        craftspeopleResponse.records.map((craftsperson) => [\n                            // @ts-expect-error party service returns ccId in id field as of now TODO\n                            craftsperson.ccId ?? craftsperson.id,\n                            Buffer.from(JSON.stringify(craftsperson)),\n                        ])\n                    )\n                );\n                return craftspeopleResponse.records;\n            }\n        }\n        return [];\n    }\n}\n"]}