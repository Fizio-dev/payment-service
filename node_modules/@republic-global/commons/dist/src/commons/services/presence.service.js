var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, singleton } from 'tsyringe';
import { commonsConfig } from '../commons-config.js';
import { CacheService } from './cache.service.js';
import { SharedCacheKeys } from './shared-cache-keys.js';
let PresenceService = class PresenceService {
    cacheService;
    constructor(cacheService) {
        this.cacheService = cacheService;
    }
    async setOnline(ccId, socketId) {
        const expiryTimestamp = Date.now() + commonsConfig.presenceTTLSeconds * 1000;
        await this.cacheService.addToSortedSet(SharedCacheKeys.onlineUserSockets(ccId), Buffer.from(socketId), expiryTimestamp);
    }
    async setOffline(ccId, socketId) {
        await this.cacheService.removeFromSortedSet(SharedCacheKeys.onlineUserSockets(ccId), Buffer.from(socketId));
    }
    async areUsersOnline(ccIds) {
        const now = Date.now();
        const pipelineResult = await this.cacheService.multi((pipeline) => {
            ccIds
                .map((ccId) => SharedCacheKeys.onlineUserSockets(ccId))
                .forEach((cacheKey) => {
                this.cacheService.removeFromSortedSetWithScoreBetween(cacheKey, CacheService.MIN, now - commonsConfig.presenceTTLSeconds * 1000);
                this.cacheService.countElementsInSortedSetWithScoreBetween(cacheKey, now, CacheService.MAX, pipeline);
            });
        });
        if (pipelineResult) {
            return ccIds.reduce((map, ccId, index) => {
                const value = pipelineResult[index]?.[1];
                map[ccId] = this.isNumber(value) && value >= 1;
                return map;
            }, {});
        }
        return {};
    }
    isNumber(value) {
        return !!value && typeof value === 'number';
    }
};
PresenceService = __decorate([
    singleton(),
    __param(0, inject(CacheService)),
    __metadata("design:paramtypes", [CacheService])
], PresenceService);
export { PresenceService };
//# sourceMappingURL=presence.service.js.map