{"version":3,"file":"cache.service.js","sourceRoot":"","sources":["../../../../src/commons/services/cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { type ChainableCommander, Redis } from 'ioredis';\nimport { type Disposable } from 'tsyringe';\n\nimport { commonsConfig } from '../commons-config.js';\nimport { LoggerFactory } from '../utils/index.js';\n\nconst redisConfig = commonsConfig.redis.config;\nconst redisOpts = commonsConfig.redis.opts;\n\nexport interface CacheKey {\n    keyName: string;\n    identifier?: string;\n}\n\nexport interface SharedCacheKey extends CacheKey {\n    rootNamespace: string;\n}\n\nconst generateKey = (cacheKey: CacheKey) => {\n    const { keyName, identifier } = cacheKey;\n    const rootNamespace = isSharedCacheKey(cacheKey)\n        ? cacheKey.rootNamespace\n        : commonsConfig.serviceName;\n    const suffix = identifier ? `:${identifier}` : '';\n    return `${rootNamespace}:${keyName}${suffix}`;\n};\n\nconst isSharedCacheKey = (cacheKey: CacheKey): cacheKey is SharedCacheKey => {\n    return (cacheKey as SharedCacheKey).rootNamespace !== undefined;\n};\n\nexport interface CacheOpts {\n    ttl?: number;\n}\n\nexport class CacheService implements Disposable {\n    public static MAX = '+inf';\n    public static MIN = '-inf';\n\n    private readonly logger = LoggerFactory.getLogger(CacheService.name);\n    private readonly client: Redis;\n\n    constructor() {\n        this.logger.info(\n            `Initializing redis connection host: ${redisConfig.host}, port: ${redisConfig.port}, db: ${redisConfig.db}`\n        );\n        // @ts-expect-error intentional - making password optional\n        this.client = new Redis({\n            ...redisConfig,\n        });\n    }\n\n    public async set(\n        key: CacheKey,\n        value: Buffer,\n        opts?: CacheOpts,\n        commander?: ChainableCommander\n    ): Promise<void> {\n        try {\n            await (commander ?? this.client).set(\n                generateKey(key),\n                value,\n                'EX',\n                opts?.ttl ?? redisOpts.ttl\n            );\n        } catch (error) {\n            this.logger.error('Error setting value in Redis:', error);\n            throw error;\n        }\n    }\n\n    public async get(\n        key: CacheKey,\n        commander?: ChainableCommander\n    ): Promise<Buffer | null> {\n        try {\n            const cacheKey = generateKey(key);\n            if (commander) {\n                commander.getBuffer(cacheKey);\n                return null;\n            } else {\n                return await this.client.getBuffer(cacheKey);\n            }\n        } catch (error) {\n            this.logger.error('Error getting value from Redis:', error);\n            throw error;\n        }\n    }\n\n    public async del(key: CacheKey): Promise<number> {\n        try {\n            return await this.client.del(generateKey(key));\n        } catch (error) {\n            this.logger.error('Error deleting key from Redis:', error);\n            throw error;\n        }\n    }\n\n    public async setHashFieldValue(\n        cacheKey: CacheKey,\n        field: string,\n        value: Buffer,\n        opts?: CacheOpts,\n        commander?: ChainableCommander\n    ): Promise<void> {\n        try {\n            const key = generateKey(cacheKey);\n\n            await (commander ?? this.client).hset(key, field, value);\n            await (commander ?? this.client).expire(\n                key,\n                opts?.ttl ?? redisOpts.ttl\n            );\n        } catch (error) {\n            this.logger.error('Error setting hash field in Redis:', error);\n            throw error;\n        }\n    }\n\n    public async getHashFieldValue(\n        key: CacheKey,\n        field: string,\n        commander?: ChainableCommander\n    ): Promise<Buffer | null> {\n        try {\n            const cacheKey = generateKey(key);\n            if (commander) {\n                commander.hgetBuffer(cacheKey, field);\n                return null;\n            }\n            return await this.client.hgetBuffer(cacheKey, field);\n        } catch (error) {\n            this.logger.error('Error getting hash field from Redis:', error);\n            throw error;\n        }\n    }\n\n    public async setHashFieldValues(\n        cacheKey: CacheKey,\n        data: Map<string, Buffer>,\n        opts?: CacheOpts,\n        commander?: ChainableCommander\n    ): Promise<void> {\n        try {\n            const key = generateKey(cacheKey);\n\n            await (commander ?? this.client).hset(key, data);\n            await (commander ?? this.client).expire(\n                key,\n                opts?.ttl ?? redisOpts.ttl\n            );\n        } catch (error) {\n            this.logger.error('Error setting hash field in Redis:', error);\n            throw error;\n        }\n    }\n\n    public async getHashFieldValues(\n        key: CacheKey,\n        fields: string[],\n        commander?: ChainableCommander\n    ): Promise<(Buffer | null)[]> {\n        try {\n            const cacheKey = generateKey(key);\n            if (commander) {\n                commander.hmgetBuffer(cacheKey, ...fields);\n                return [];\n            }\n            return await this.client.hmgetBuffer(cacheKey, ...fields);\n        } catch (error) {\n            this.logger.error('Error getting hash field from Redis:', error);\n            throw error;\n        }\n    }\n\n    public async addToSet(\n        cacheKey: CacheKey,\n        member: Buffer,\n        opts?: CacheOpts,\n        commander?: ChainableCommander\n    ): Promise<void> {\n        try {\n            const key = generateKey(cacheKey);\n            await (commander ?? this.client).sadd(key, member);\n            await (commander ?? this.client).expire(\n                key,\n                opts?.ttl ?? redisOpts.ttl\n            );\n        } catch (error) {\n            this.logger.error('Error calling sadd/expire:', error);\n            throw error;\n        }\n    }\n\n    public async removeFromSet(\n        key: CacheKey,\n        member: Buffer,\n        commander?: ChainableCommander\n    ): Promise<void> {\n        try {\n            await (commander ?? this.client).srem(generateKey(key), member);\n        } catch (error) {\n            this.logger.error('Error calling srem:', error);\n            throw error;\n        }\n    }\n\n    public async isMemberOfSet(\n        key: CacheKey,\n        member: Buffer,\n        commander?: ChainableCommander\n    ): Promise<boolean | void> {\n        try {\n            const cacheKey = generateKey(key);\n\n            if (commander) {\n                commander.sismember(cacheKey, member);\n            } else {\n                const isMember = await this.client.sismember(cacheKey, member);\n                return isMember === 1;\n            }\n        } catch (error) {\n            this.logger.error('Error calling smismember:', error);\n            throw error;\n        }\n    }\n\n    public async areMembersOfSet(\n        key: CacheKey,\n        members: Buffer[],\n        commander?: ChainableCommander\n    ): Promise<boolean[] | void> {\n        try {\n            const cacheKey = generateKey(key);\n\n            if (commander) {\n                commander.smismember(cacheKey, members);\n            } else {\n                const results = await this.client.smismember(cacheKey, members);\n                return results.map((result) => result === 1);\n            }\n        } catch (error) {\n            this.logger.error('Error calling smismember:', error);\n            throw error;\n        }\n    }\n\n    public async getAllSetMembers(\n        key: CacheKey,\n        commander?: ChainableCommander\n    ): Promise<string[] | void> {\n        try {\n            const cacheKey = generateKey(key);\n            if (commander) {\n                commander.smembers(cacheKey);\n            } else {\n                return await this.client.smembers(cacheKey);\n            }\n        } catch (error) {\n            this.logger.error('Error calling smembers:', error);\n            throw error;\n        }\n    }\n\n    public async countSetMembers(\n        key: CacheKey,\n        commander?: ChainableCommander\n    ): Promise<number | void> {\n        try {\n            const cacheKey = generateKey(key);\n\n            if (commander) {\n                commander.scard(cacheKey);\n            } else {\n                return await this.client.scard(cacheKey);\n            }\n        } catch (error) {\n            this.logger.error('Error calling scard:', error);\n            throw error;\n        }\n    }\n\n    async addToSortedSet(\n        key: SharedCacheKey,\n        member: Buffer,\n        score?: number,\n        opts?: CacheOpts,\n        commander?: ChainableCommander\n    ) {\n        try {\n            await (commander ?? this.client).zadd(\n                generateKey(key),\n                score ?? Date.now() + (opts?.ttl ?? redisOpts.ttl),\n                member\n            );\n        } catch (error) {\n            this.logger.error('Error calling zadd:', error);\n            throw error;\n        }\n    }\n\n    async removeFromSortedSet(\n        key: SharedCacheKey,\n        member: Buffer,\n        commander?: ChainableCommander\n    ) {\n        try {\n            await (commander ?? this.client).zrem(generateKey(key), member);\n        } catch (error) {\n            this.logger.error('Error calling zrem:', error);\n            throw error;\n        }\n    }\n\n    async removeFromSortedSetWithScoreBetween(\n        key: SharedCacheKey,\n        min: number | string,\n        max: number | string,\n        commander?: ChainableCommander\n    ) {\n        try {\n            await (commander ?? this.client).zremrangebyscore(\n                generateKey(key),\n                min,\n                max\n            );\n        } catch (error) {\n            this.logger.error('Error calling zremrangebyscore:', error);\n            throw error;\n        }\n    }\n\n    async countElementsInSortedSetWithScoreBetween(\n        key: SharedCacheKey,\n        min: number | string,\n        max: number | string,\n        commander?: ChainableCommander\n    ): Promise<number | void> {\n        try {\n            const cacheKey = generateKey(key);\n\n            if (commander) {\n                commander.zcount(cacheKey, min, max);\n            } else {\n                return await this.client.zcount(cacheKey, min, max);\n            }\n        } catch (error) {\n            this.logger.error('Error calling zcount:', error);\n            throw error;\n        }\n    }\n\n    public async multi(\n        fn: (commander: ChainableCommander) => void\n    ): Promise<[error: Error | null, result: unknown][] | null> {\n        const commander = this.client.pipeline();\n        fn(commander);\n        return commander.exec();\n    }\n\n    async dispose(): Promise<void> {\n        this.logger.info('disposing redis connection...');\n        try {\n            await this.client.quit();\n        } catch (error) {\n            this.logger.error('Error quitting Redis connection:', error);\n            throw error;\n        }\n    }\n}\n"]}