/// <reference types="node" resolution-mode="require"/>
import { type ChainableCommander } from 'ioredis';
import { type Disposable } from 'tsyringe';
export interface CacheKey {
    keyName: string;
    identifier?: string;
}
export interface SharedCacheKey extends CacheKey {
    rootNamespace: string;
}
export interface CacheOpts {
    ttl?: number;
}
export declare class CacheService implements Disposable {
    static MAX: string;
    static MIN: string;
    private readonly logger;
    private readonly client;
    constructor();
    set(key: CacheKey, value: Buffer, opts?: CacheOpts, commander?: ChainableCommander): Promise<void>;
    get(key: CacheKey, commander?: ChainableCommander): Promise<Buffer | null>;
    del(key: CacheKey): Promise<number>;
    setHashFieldValue(cacheKey: CacheKey, field: string, value: Buffer, opts?: CacheOpts, commander?: ChainableCommander): Promise<void>;
    getHashFieldValue(key: CacheKey, field: string, commander?: ChainableCommander): Promise<Buffer | null>;
    setHashFieldValues(cacheKey: CacheKey, data: Map<string, Buffer>, opts?: CacheOpts, commander?: ChainableCommander): Promise<void>;
    getHashFieldValues(key: CacheKey, fields: string[], commander?: ChainableCommander): Promise<(Buffer | null)[]>;
    addToSet(cacheKey: CacheKey, member: Buffer, opts?: CacheOpts, commander?: ChainableCommander): Promise<void>;
    removeFromSet(key: CacheKey, member: Buffer, commander?: ChainableCommander): Promise<void>;
    isMemberOfSet(key: CacheKey, member: Buffer, commander?: ChainableCommander): Promise<boolean | void>;
    areMembersOfSet(key: CacheKey, members: Buffer[], commander?: ChainableCommander): Promise<boolean[] | void>;
    getAllSetMembers(key: CacheKey, commander?: ChainableCommander): Promise<string[] | void>;
    countSetMembers(key: CacheKey, commander?: ChainableCommander): Promise<number | void>;
    addToSortedSet(key: SharedCacheKey, member: Buffer, score?: number, opts?: CacheOpts, commander?: ChainableCommander): Promise<void>;
    removeFromSortedSet(key: SharedCacheKey, member: Buffer, commander?: ChainableCommander): Promise<void>;
    removeFromSortedSetWithScoreBetween(key: SharedCacheKey, min: number | string, max: number | string, commander?: ChainableCommander): Promise<void>;
    countElementsInSortedSetWithScoreBetween(key: SharedCacheKey, min: number | string, max: number | string, commander?: ChainableCommander): Promise<number | void>;
    multi(fn: (commander: ChainableCommander) => void): Promise<[error: Error | null, result: unknown][] | null>;
    dispose(): Promise<void>;
}
//# sourceMappingURL=cache.service.d.ts.map