{"version":3,"file":"objects.js","sourceRoot":"","sources":["../../../../src/commons/helpers/objects.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAarC,MAAM,UAAU,wBAAwB,CACpC,GAAY;IAEZ,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QACrB,OAAO,aAAa,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAQ,CAAC;IACrD,CAAC;SAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;QACjD,OAAO,aAAa,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAM,CAAC;IACnD,CAAC;SAAM,CAAC;QACJ,OAAO,GAAG,CAAC;IACf,CAAC;AACL,CAAC;AAED,cAAc;AACd,MAAM,UAAU,kBAAkB,CAC9B,GAA4B,EAC5B,OAAgC;IAEhC,MAAM,MAAM,GAA4B,EAAE,CAAC;IAC3C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;SAClB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC;SAClC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACjB,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,OAAO,GAAG,CAAC;IACf,CAAC,EAAE,MAAM,CAAC,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAa,EAAE,MAAc;IACnD,OAAO,KAAK,CAAC,WAAW,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,QAAQ,CACpB,GAA6C,EAC7C,UAAoB;IAEpB,MAAM,MAAM,GAA6C,EAAE,CAAC;IAC5D,MAAM,KAAK,GAGL,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;IAExB,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC;QAClB,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,KAAK,CAAC,GAAG,EAAG,CAAC;QAEhE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACpC,MAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;gBAC/D,aAAa,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;YACxC,CAAC;iBAAM,IACH,OAAO,UAAU,CAAC,GAAG,CAAC,KAAK,QAAQ;gBACnC,UAAU,CAAC,GAAG,CAAC,KAAK,IAAI,EAC1B,CAAC;gBACC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBACxB,KAAK,CAAC,IAAI,CAAC;oBACP,GAAG,EAAE,UAAU,CAAC,GAAG,CAGlB;oBACD,MAAM,EAAE,aAAa,CAAC,GAAG,CAGxB;iBACJ,CAAC,CAAC;YACP,CAAC;iBAAM,CAAC;gBACJ,aAAa,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAGvB,CAAC;YACjB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["import camelcaseKeys from 'camelcase-keys';\nimport { merge } from 'ts-deepmerge';\n\n/**\n * Convert all keys of given object to camel case.\n * Needed to map typeOrm raw data to entities\n * @param obj\n */\nexport function transformKeysToCamelCase<T extends Record<string, unknown>>(\n    obj: T\n): T;\nexport function transformKeysToCamelCase<T extends Record<string, unknown>>(\n    obj: T[]\n): T[];\nexport function transformKeysToCamelCase<T extends Record<string, unknown>>(\n    obj: T | T[]\n): T | T[] {\n    if (Array.isArray(obj)) {\n        return camelcaseKeys(obj, { deep: true }) as T[];\n    } else if (typeof obj === 'object' && obj !== null) {\n        return camelcaseKeys(obj, { deep: true }) as T;\n    } else {\n        return obj;\n    }\n}\n\n// TODO rename\nexport function filterKeysGetFirst(\n    obj: Record<string, unknown>,\n    exclude: Record<string, unknown>\n): Record<string, unknown> {\n    const result: Record<string, unknown> = {};\n    return Object.keys(obj)\n        .filter((key) => !(key in exclude))\n        .reduce((acc, key) => {\n            acc[key] = obj[key];\n            return acc;\n        }, result);\n}\n\nexport function deepMerge(first: object, second: object): object {\n    return merge.withOptions({ mergeArrays: true }, first, second);\n}\n\nexport function maskKeys(\n    obj: Record<string, string | number | object>,\n    keysToMask: string[]\n): Record<string, string | number | object> {\n    const newObj: Record<string, string | number | object> = {};\n    const stack: {\n        obj: Record<string, string | number | object>;\n        newObj: Record<string, string | number | object>;\n    }[] = [{ obj, newObj }];\n\n    while (stack.length) {\n        const { obj: currentObj, newObj: currentNewObj } = stack.pop()!;\n\n        Object.keys(currentObj).forEach((key) => {\n            const lowerCaseKey = key.toLowerCase();\n            if (keysToMask.some((maskKey) => lowerCaseKey.includes(maskKey))) {\n                currentNewObj[key] = '***MASKED***';\n            } else if (\n                typeof currentObj[key] === 'object' &&\n                currentObj[key] !== null\n            ) {\n                currentNewObj[key] = {};\n                stack.push({\n                    obj: currentObj[key] as Record<\n                        string,\n                        string | number | object\n                    >,\n                    newObj: currentNewObj[key] as Record<\n                        string,\n                        string | number | object\n                    >,\n                });\n            } else {\n                currentNewObj[key] = currentObj[key] as\n                    | string\n                    | number\n                    | object;\n            }\n        });\n    }\n\n    return newObj;\n}\n"]}