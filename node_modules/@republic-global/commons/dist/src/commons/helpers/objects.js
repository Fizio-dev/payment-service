import camelcaseKeys from 'camelcase-keys';
import { merge } from 'ts-deepmerge';
export function transformKeysToCamelCase(obj) {
    if (Array.isArray(obj)) {
        return camelcaseKeys(obj, { deep: true });
    }
    else if (typeof obj === 'object' && obj !== null) {
        return camelcaseKeys(obj, { deep: true });
    }
    else {
        return obj;
    }
}
// TODO rename
export function filterKeysGetFirst(obj, exclude) {
    const result = {};
    return Object.keys(obj)
        .filter((key) => !(key in exclude))
        .reduce((acc, key) => {
        acc[key] = obj[key];
        return acc;
    }, result);
}
export function deepMerge(first, second) {
    return merge.withOptions({ mergeArrays: true }, first, second);
}
export function maskKeys(obj, keysToMask) {
    const newObj = {};
    const stack = [{ obj, newObj }];
    while (stack.length) {
        const { obj: currentObj, newObj: currentNewObj } = stack.pop();
        Object.keys(currentObj).forEach((key) => {
            const lowerCaseKey = key.toLowerCase();
            if (keysToMask.some((maskKey) => lowerCaseKey.includes(maskKey))) {
                currentNewObj[key] = '***MASKED***';
            }
            else if (typeof currentObj[key] === 'object' &&
                currentObj[key] !== null) {
                currentNewObj[key] = {};
                stack.push({
                    obj: currentObj[key],
                    newObj: currentNewObj[key],
                });
            }
            else {
                currentNewObj[key] = currentObj[key];
            }
        });
    }
    return newObj;
}
//# sourceMappingURL=objects.js.map