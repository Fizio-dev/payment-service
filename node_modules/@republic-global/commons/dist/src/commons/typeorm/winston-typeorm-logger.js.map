{"version":3,"file":"winston-typeorm-logger.js","sourceRoot":"","sources":["../../../../src/commons/typeorm/winston-typeorm-logger.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,cAAc,GAKjB,MAAM,SAAS,CAAC;AAGjB;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,cAAc;IAE/B;IADrB,YACqB,aAAqB,EACtC,OAAuB;QAEvB,KAAK,CAAC,OAAO,CAAC,CAAC;QAHE,kBAAa,GAAb,aAAa,CAAQ;IAI1C,CAAC;IAED;;OAEG;IACO,QAAQ,CACd,KAAe,EACf,UAAqC,EACrC,WAAyB;QAEzB,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;YACjD,YAAY,EAAE,KAAK;YACnB,gBAAgB,EAAE,KAAK;SAC1B,CAAC,CAAC;QACH,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC7B,QAAQ,OAAO,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC;gBAC5B,KAAK,KAAK,CAAC;gBACX,KAAK,cAAc,CAAC;gBACpB,KAAK,WAAW;oBACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBACzC,MAAM;gBAEV,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACR,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CACnB,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC1B,oBAAoB,CAAC,SAAS,CAC1B,OAAO,EACP,KAAK,EACL,WAAW,CACd,CACJ,CAAC;oBACN,CAAC;yBAAM,CAAC;wBACJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBAC7C,CAAC;oBACD,MAAM;gBAEV,KAAK,MAAM,CAAC;gBACZ,KAAK,YAAY;oBACb,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CACnB,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC1B,oBAAoB,CAAC,SAAS,CAC1B,OAAO,EACP,KAAK,EACL,WAAW,CACd,CACJ,CAAC;oBACN,CAAC;yBAAM,CAAC;wBACJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBAC7C,CAAC;oBACD,MAAM;gBAEV,KAAK,OAAO,CAAC;gBACb,KAAK,aAAa;oBACd,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,IAAI,CAAC,aAAa,CAAC,KAAK,CACpB,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC1B,oBAAoB,CAAC,SAAS,CAC1B,OAAO,EACP,KAAK,EACL,WAAW,CACd,CACJ,CAAC;oBACN,CAAC;yBAAM,CAAC;wBACJ,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBAC9C,CAAC;oBACD,MAAM;YACd,CAAC;QACL,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,SAAS,CACpB,OAAmB,EACnB,KAAa,EACb,WAAyB;QAEzB,OAAO;YACH,WAAW,EAAE;gBACT,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,KAAK,EAAE,KAAK;gBACZ,yBAAyB,EAAE,WAAW,EAAE,IAAI;aAC/C;SACJ,CAAC;IACN,CAAC;CACJ","sourcesContent":["import {\n    AbstractLogger,\n    type LogLevel,\n    type LogMessage,\n    type LoggerOptions,\n    type QueryRunner,\n} from 'typeorm';\nimport type { Logger } from 'winston';\n\n/**\n * Custom typeorm logger based on winston logger.\n */\nexport class WinstonTypeOrmLogger extends AbstractLogger {\n    constructor(\n        private readonly winstonLogger: Logger,\n        options?: LoggerOptions\n    ) {\n        super(options);\n    }\n\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner\n    ) {\n        const messages = this.prepareLogMessages(logMessage, {\n            highlightSql: false,\n            addColonToPrefix: false,\n        });\n        for (const message of messages) {\n            switch (message.type ?? level) {\n                case 'log':\n                case 'schema-build':\n                case 'migration':\n                    this.winstonLogger.info(message.message);\n                    break;\n\n                case 'info':\n                case 'query':\n                    if (message.prefix) {\n                        this.winstonLogger.info(\n                            message.message.toString(),\n                            WinstonTypeOrmLogger.buildMeta(\n                                message,\n                                level,\n                                queryRunner\n                            )\n                        );\n                    } else {\n                        this.winstonLogger.info(message.message);\n                    }\n                    break;\n\n                case 'warn':\n                case 'query-slow':\n                    if (message.prefix) {\n                        this.winstonLogger.warn(\n                            message.message.toString(),\n                            WinstonTypeOrmLogger.buildMeta(\n                                message,\n                                level,\n                                queryRunner\n                            )\n                        );\n                    } else {\n                        this.winstonLogger.warn(message.message);\n                    }\n                    break;\n\n                case 'error':\n                case 'query-error':\n                    if (message.prefix) {\n                        this.winstonLogger.error(\n                            message.message.toString(),\n                            WinstonTypeOrmLogger.buildMeta(\n                                message,\n                                level,\n                                queryRunner\n                            )\n                        );\n                    } else {\n                        this.winstonLogger.error(message.message);\n                    }\n                    break;\n            }\n        }\n    }\n\n    private static buildMeta(\n        message: LogMessage,\n        level: string,\n        queryRunner?: QueryRunner\n    ) {\n        return {\n            typeOrmMeta: {\n                prefix: message.prefix,\n                type: message.type,\n                level: level,\n                queryRunnerAdditionalData: queryRunner?.data,\n            },\n        };\n    }\n}\n"]}