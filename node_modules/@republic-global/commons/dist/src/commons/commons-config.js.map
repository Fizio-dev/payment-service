{"version":3,"file":"commons-config.js","sourceRoot":"","sources":["../../../src/commons/commons-config.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,OAAO,MAAM,cAAc,CAAC;AAEnC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,aAAa,CAAC;AAErD,IAAI,GAAG,KAAK,YAAY,EAAE,CAAC;IACvB,MAAM,CAAC,MAAM,EAAE,CAAC;AACpB,CAAC;AAED,MAAM,CAAC,MAAM,aAAa,GAAG;IACzB,WAAW,EAAE,MAAM,CAAC,cAAc,CAAC;IACnC,kBAAkB,EAAE,QAAQ,CACxB,eAAe,CAAC,sBAAsB,EAAE,OAAO,CAAC,CACnD;IACD,OAAO,EAAE,MAAM,CAAC,UAAU,CAAC;IAC3B,OAAO,EAAE;QACL,mBAAmB,EAAE;YACjB,GAAG,EAAE,MAAM,CAAC,mBAAmB,CAAC;YAChC,QAAQ,EAAE,MAAM,CAAC,mBAAmB,CAAC;YACrC,YAAY,EAAE,MAAM,CAAC,uBAAuB,CAAC;YAC7C,KAAK,EAAE,MAAM,CAAC,eAAe,CAAC;SACjC;KACJ;IACD,KAAK,EAAE;QACH,MAAM,EAAE;YACJ,IAAI,EAAE,MAAM,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YACpC,QAAQ,EAAE,MAAM,CAAC,gBAAgB,CAAC;YAClC,QAAQ,EAAE,cAAc,CAAC,gBAAgB,CAAC;YAC1C,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACnC;QACD,IAAI,EAAE;YACF,GAAG,EAAE,QAAQ,CAAC,eAAe,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;SAC7D;KACJ;IACD,QAAQ,EAAE;QACN,IAAI,EAAE;YACF,OAAO,EAAE,MAAM,CAAC,eAAe,CAAC;SACnC;QACD,KAAK,EAAE;YACH,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC;SACpC;QACD,OAAO,EAAE;YACL,OAAO,EAAE,MAAM,CAAC,kBAAkB,CAAC;SACtC;KACJ;IACD,MAAM,EAAE;QACJ,YAAY,EAAE,eAAe,CAAC,qBAAqB,EAAE,cAAc,CAAC;QACpE,OAAO,EAAE,eAAe,CAAC,gBAAgB,EAAE,SAAS,CAAC;QACrD,mBAAmB,EAAE,eAAe,CAChC,0BAA0B,EAC1B,mBAAmB,CACtB;KACJ;CACJ,CAAC;AAEF,MAAM,UAAU,MAAM,CAAC,MAAc;IACjC,MAAM,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;IACnC,IAAI,CAAC,GAAG,EAAE,CAAC;QACP,MAAM,IAAI,KAAK,CAAC,GAAG,MAAM,UAAU,CAAC,CAAC;IACzC,CAAC;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AACD,MAAM,UAAU,eAAe,CAAC,MAAc,EAAE,YAAoB;IAChE,OAAO,cAAc,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,MAAc;IACzC,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import dotenv from 'dotenv';\nimport process from 'node:process';\n\nconst ENV = process.env['NODE_ENV'] ?? 'development';\n\nif (ENV !== 'production') {\n    dotenv.config();\n}\n\nexport const commonsConfig = {\n    serviceName: getEnv('SERVICE_NAME'),\n    presenceTTLSeconds: parseInt(\n        getEnvOrDefault('PRESENCE_TTL_SECONDS', '14400')\n    ),\n    dekList: getEnv('DEK_LIST'),\n    authLib: {\n        serviceAccountToken: {\n            url: getEnv('AUTH_SA_TOKEN_URL'),\n            clientId: getEnv('AUTH_SA_CLIENT_ID'),\n            clientSecret: getEnv('AUTH_SA_CLIENT_SECRET'),\n            scope: getEnv('AUTH_SA_SCOPE'),\n        },\n    },\n    redis: {\n        config: {\n            host: getEnv('REDIS_HOST'),\n            port: parseInt(getEnv('REDIS_PORT')),\n            username: getEnv('REDIS_USERNAME'),\n            password: getEnvOptional('REDIS_PASSWORD'),\n            db: parseInt(getEnv('REDIS_DB')),\n        },\n        opts: {\n            ttl: parseInt(getEnvOrDefault('REDIS_DEFAULT_TTL', '180')),\n        },\n    },\n    services: {\n        work: {\n            baseUrl: getEnv('WORK_BASE_URL'),\n        },\n        party: {\n            baseUrl: getEnv('PARTY_BASE_URL'),\n        },\n        payment: {\n            baseUrl: getEnv('PAYMENT_BASE_URL'),\n        },\n    },\n    queues: {\n        notification: getEnvOrDefault('QUEUES_NOTIFICATION', 'notification'),\n        storage: getEnvOrDefault('QUEUES_STORAGE', 'storage'),\n        'user-notification': getEnvOrDefault(\n            'QUEUES_USER_NOTIFICATION',\n            'user-notification'\n        ),\n    },\n};\n\nexport function getEnv(envVar: string): string {\n    const val = getEnvOptional(envVar);\n    if (!val) {\n        throw new Error(`${envVar} missing`);\n    }\n    return val;\n}\nexport function getEnvOrDefault(envVar: string, defaultValue: string): string {\n    return getEnvOptional(envVar) ?? defaultValue;\n}\n\nexport function getEnvOptional(envVar: string) {\n    return process.env[envVar];\n}\n"]}