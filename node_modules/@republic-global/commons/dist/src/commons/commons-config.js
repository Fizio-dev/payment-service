import dotenv from 'dotenv';
import process from 'node:process';
const ENV = process.env['NODE_ENV'] ?? 'development';
if (ENV !== 'production') {
    dotenv.config();
}
export const commonsConfig = {
    serviceName: getEnv('SERVICE_NAME'),
    presenceTTLSeconds: parseInt(getEnvOrDefault('PRESENCE_TTL_SECONDS', '14400')),
    dekList: getEnv('DEK_LIST'),
    authLib: {
        serviceAccountToken: {
            url: getEnv('AUTH_SA_TOKEN_URL'),
            clientId: getEnv('AUTH_SA_CLIENT_ID'),
            clientSecret: getEnv('AUTH_SA_CLIENT_SECRET'),
            scope: getEnv('AUTH_SA_SCOPE'),
        },
    },
    redis: {
        config: {
            host: getEnv('REDIS_HOST'),
            port: parseInt(getEnv('REDIS_PORT')),
            username: getEnv('REDIS_USERNAME'),
            password: getEnvOptional('REDIS_PASSWORD'),
            db: parseInt(getEnv('REDIS_DB')),
        },
        opts: {
            ttl: parseInt(getEnvOrDefault('REDIS_DEFAULT_TTL', '180')),
        },
    },
    services: {
        work: {
            baseUrl: getEnv('WORK_BASE_URL'),
        },
        party: {
            baseUrl: getEnv('PARTY_BASE_URL'),
        },
        payment: {
            baseUrl: getEnv('PAYMENT_BASE_URL'),
        },
    },
    queues: {
        notification: getEnvOrDefault('QUEUES_NOTIFICATION', 'notification'),
        storage: getEnvOrDefault('QUEUES_STORAGE', 'storage'),
        'user-notification': getEnvOrDefault('QUEUES_USER_NOTIFICATION', 'user-notification'),
    },
};
export function getEnv(envVar) {
    const val = getEnvOptional(envVar);
    if (!val) {
        throw new Error(`${envVar} missing`);
    }
    return val;
}
export function getEnvOrDefault(envVar, defaultValue) {
    return getEnvOptional(envVar) ?? defaultValue;
}
export function getEnvOptional(envVar) {
    return process.env[envVar];
}
//# sourceMappingURL=commons-config.js.map