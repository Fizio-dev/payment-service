{"version":3,"file":"logger-factory.js","sourceRoot":"","sources":["../../../../src/commons/utils/logger-factory.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAEpE,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAE3D,MAAM,OAAO,aAAa;IACf,MAAM,CAAC,SAAS,CAAC,UAAkB;QACtC,OAAO,YAAY,CAAC;YAChB,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM;YACjC,mCAAmC;YACnC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC;YACzC,UAAU,EAAE,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC;YACtC,WAAW,EAAE;gBACT,WAAW,EAAE,aAAa,CAAC,WAAW,EAAE,+CAA+C;aAC1F;YACD,WAAW,EAAE,KAAK;SACrB,CAAC,CAAC;IACP,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,UAAkB;QAC9C,OAAO,MAAM,CAAC,OAAO,CACjB,MAAM,CAAC,SAAS,EAAE,EAClB,MAAM,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC,EAAE,0EAA0E;QAC9I,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EACnC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;YACnB,wBAAwB;YACxB,MAAM,SAAS,GAAG;gBACd,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC;gBAC5B,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;gBACpB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,EAAE;gBACzF,IAAI,EAAE,EAAE;gBACR,QAAQ,EAAE,EAAE;aACf,CAAC;YAEF,4CAA4C;YAC5C,MAAM,eAAe,GAAW,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACpD,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;YAEnD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5B,6CAA6C;gBAC7C,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC5B,SAAS,CAAC,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,GAAY,EAAE,EAAE;wBACjD,IAAI,GAAG,YAAY,KAAK,EAAE,CAAC;4BACvB,OAAO,IAAI,CAAC,SAAS,CACjB,GAAG,EACH,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAClC,CAAC;wBACN,CAAC;wBACD,OAAO,GAAG,CAAC;oBACf,CAAC,CAAC,CAAC;gBACP,CAAC;YACL,CAAC;YAED,wEAAwE;YACxE,IACI,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC;gBACzB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAE,KAAK,QAAQ,EACxC,CAAC;gBACC,SAAS,CAAC,QAAQ,GAAG,kBAAkB,CACnC,IAAI,CAAC,UAAU,CAAC,EAChB,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAE,CACxB,CAAC;YACN,CAAC;YAED,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC,CAAC,CACL,CAAC;IACN,CAAC;CACJ","sourcesContent":["import winston, { createLogger, format, transports } from 'winston';\n\nimport { commonsConfig } from '../commons-config.js';\nimport { filterKeysGetFirst } from '../helpers/objects.js';\n\nexport class LoggerFactory {\n    public static getLogger(moduleName: string) {\n        return createLogger({\n            level: 'debug',\n            levels: winston.config.npm.levels,\n            // format: winston.format.simple(),\n            format: this.getConsoleFormat(moduleName),\n            transports: [new transports.Console()],\n            defaultMeta: {\n                serviceName: commonsConfig.serviceName, // can probably include more from env in future\n            },\n            exitOnError: false,\n        });\n    }\n\n    private static getConsoleFormat(moduleName: string) {\n        return format.combine(\n            format.timestamp(),\n            format.metadata({ fillExcept: ['timestamp', 'message', 'level'] }), // Include all properties except timestamp, label, and message in metadata\n            format.label({ label: moduleName }),\n            format.printf((info) => {\n                // structured log schema\n                const logObject = {\n                    timestamp: info['timestamp'],\n                    label: info['label'],\n                    level: info.level,\n                    message: `${info['timestamp']}  [${info.level}] -- [${info['label']}] :  ${info.message}`,\n                    args: [],\n                    metadata: {},\n                };\n\n                // Check if additional arguments are present\n                const splatProperties: symbol = Symbol.for('splat');\n                const additionalArgs = info[splatProperties] || [];\n\n                if (additionalArgs.length > 0) {\n                    // Add additional arguments to the log object\n                    if (additionalArgs.length > 0) {\n                        logObject.args = additionalArgs.map((arg: unknown) => {\n                            if (arg instanceof Error) {\n                                return JSON.stringify(\n                                    arg,\n                                    Object.getOwnPropertyNames(arg)\n                                );\n                            }\n                            return arg;\n                        });\n                    }\n                }\n\n                // metadata includes arg[0] by default if it's an object, filter it out.\n                if (\n                    logObject.args.length > 0 &&\n                    typeof logObject.args[0]! === 'object'\n                ) {\n                    logObject.metadata = filterKeysGetFirst(\n                        info['metadata'],\n                        logObject['args'][0]!\n                    );\n                }\n\n                return JSON.stringify(logObject);\n            })\n        );\n    }\n}\n"]}