import winston, { createLogger, format, transports } from 'winston';
import { commonsConfig } from '../commons-config.js';
import { filterKeysGetFirst } from '../helpers/objects.js';
export class LoggerFactory {
    static getLogger(moduleName) {
        return createLogger({
            level: 'debug',
            levels: winston.config.npm.levels,
            // format: winston.format.simple(),
            format: this.getConsoleFormat(moduleName),
            transports: [new transports.Console()],
            defaultMeta: {
                serviceName: commonsConfig.serviceName, // can probably include more from env in future
            },
            exitOnError: false,
        });
    }
    static getConsoleFormat(moduleName) {
        return format.combine(format.timestamp(), format.metadata({ fillExcept: ['timestamp', 'message', 'level'] }), // Include all properties except timestamp, label, and message in metadata
        format.label({ label: moduleName }), format.printf((info) => {
            // structured log schema
            const logObject = {
                timestamp: info['timestamp'],
                label: info['label'],
                level: info.level,
                message: `${info['timestamp']}  [${info.level}] -- [${info['label']}] :  ${info.message}`,
                args: [],
                metadata: {},
            };
            // Check if additional arguments are present
            const splatProperties = Symbol.for('splat');
            const additionalArgs = info[splatProperties] || [];
            if (additionalArgs.length > 0) {
                // Add additional arguments to the log object
                if (additionalArgs.length > 0) {
                    logObject.args = additionalArgs.map((arg) => {
                        if (arg instanceof Error) {
                            return JSON.stringify(arg, Object.getOwnPropertyNames(arg));
                        }
                        return arg;
                    });
                }
            }
            // metadata includes arg[0] by default if it's an object, filter it out.
            if (logObject.args.length > 0 &&
                typeof logObject.args[0] === 'object') {
                logObject.metadata = filterKeysGetFirst(info['metadata'], logObject['args'][0]);
            }
            return JSON.stringify(logObject);
        }));
    }
}
//# sourceMappingURL=logger-factory.js.map