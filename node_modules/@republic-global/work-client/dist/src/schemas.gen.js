// This file is auto-generated by @hey-api/openapi-ts
export const $WorkStatusEnum = {
    type: 'string',
    enum: ['OPEN', 'DRAFT', 'CLOSED'],
};
export const $WorkTypeEnum = {
    type: 'string',
    default: 'GIG',
    enum: ['GIG', 'TOURNAMENT', 'TASK', 'DATA_LABELING_TASK'],
};
export const $WorkCategoryEnum = {
    type: 'string',
    default: 'DESIGN',
    enum: [
        'DESIGN',
        'DATA_SCIENCE',
        'LEGAL',
        'CUSTOMER_SERVICE',
        'TRANSLATION',
        'WEB_MOBILE_DEVELOPMENT',
        'IT_CLOUD_NETWORKING',
        'ARCHITECTURE',
        'DESKTOP_DEVELOPMENT',
    ],
};
export const $PaymentFrequencyEnum = {
    type: 'string',
    default: 'HOURLY',
    enum: ['MONTHLY', 'WEEKLY', 'HOURLY'],
};
export const $PaymentTypeEnum = {
    type: 'string',
    default: 'HOURLY',
    enum: ['FIXED', 'PRIZE_POOL', 'HOURLY'],
};
export const $ContractStatusEnum = {
    type: 'string',
    default: 'ACTIVE',
    enum: ['ACTIVE', 'INACTIVE'],
};
export const $ExperienceEnum = {
    type: 'string',
    default: 'EXPERT',
    enum: ['NO_EXPERIENCE', 'ENTRY', 'INTERMEDIATE', 'EXPERT'],
};
export const $TerminationReasonEnum = {
    type: 'string',
    default: 'FINISHED_SUCCESSFULLY',
    enum: [
        'UNCLEAR_INSTRUCTIONS',
        'FAILED_TO_COMMUNICATE',
        'PAYMENT_ISSUE',
        'FINISHED_SUCCESSFULLY',
        'UNABLE_TO_COLLABORATE',
        'NEW_CONTRACT_WILL_BE_CREATED',
        'OTHER',
    ],
};
export const $TerminatedByEnum = {
    type: 'string',
    enum: ['CLIENT', 'CRAFTSPERSON', 'SYSTEM'],
};
export const $ApplicationStatusEnum = {
    type: 'string',
    default: 'APPLIED',
    enum: [
        'APPLIED',
        'CRAFTSPERSON_WITHDREW',
        'CRAFTSPERSON_REJECTED_CONTRACT',
        'APPROVED_BY_CLIENT',
        'REJECTED',
        'ACCEPTED',
    ],
};
export const $WorkDetails = {
    allOf: [
        {
            $ref: '#/components/schemas/BasePayment',
        },
    ],
    required: [
        'title',
        'workType',
        'category',
        'duration',
        'minAvailability',
        'paymentAmount',
        'paymentCurrency',
        'paymentType',
        'skills',
        'experience',
        'description',
        'agreements',
        'officeAttendanceRequired',
    ],
    properties: {
        title: {
            type: 'string',
            example: 'Looking for software developer for new website',
            minLength: 20,
            maxLength: 200,
        },
        status: {
            $ref: '#/components/schemas/WorkStatusEnum',
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
        },
        workType: {
            $ref: '#/components/schemas/WorkTypeEnum',
        },
        category: {
            $ref: '#/components/schemas/WorkCategoryEnum',
        },
        duration: {
            type: 'integer',
            description: 'months',
        },
        minAvailability: {
            type: 'integer',
            description: 'hours a week',
            example: 40,
            minimum: 1,
            maximum: 120,
        },
        skills: {
            $ref: '#/components/schemas/Skills',
        },
        experience: {
            $ref: '#/components/schemas/ExperienceEnum',
        },
        description: {
            type: 'string',
            example: '## Overview\\nOur new product will be launched soon and we are looking for a skilled set of professionals',
            description: 'This is a markdown description',
            minLength: 80,
            maxLength: 15000,
        },
        agreements: {
            type: 'array',
            example: [
                '1468b202-86f2-4193-b351-c5cf650a08b7',
                '0ed588fe-a8e7-418b-b03a-a192e128bd3d',
            ],
            items: {
                type: 'string',
            },
        },
        officeAttendanceRequired: {
            type: 'boolean',
        },
        officeLocation: {
            type: 'object',
            required: ['address', 'countryIso', 'state', 'city'],
            properties: {
                address: {
                    type: 'string',
                    example: '395 Main Terrace, Aurora, Colorado, 80010, United States',
                    minLength: 10,
                    maxLength: 300,
                },
                latitude: {
                    type: 'string',
                    example: '40.7128',
                },
                longitude: {
                    type: 'string',
                    example: '-74.0060',
                },
                countryIso: {
                    type: 'string',
                    format: 'iso3166-1',
                    example: 'CA',
                    minLength: 2,
                    maxLength: 2,
                },
                state: {
                    type: 'string',
                    example: 'Ontario',
                    minLength: 1,
                    maxLength: 200,
                },
                city: {
                    type: 'string',
                    example: 'Ottawa',
                    minLength: 1,
                    maxLength: 200,
                },
            },
        },
        allowedCountries: {
            type: 'array',
            format: 'iso3166-1',
            example: ['UK', 'US'],
        },
    },
};
export const $WorkOverview = {
    allOf: [
        {
            $ref: '#/components/schemas/BasePayment',
        },
    ],
    properties: {
        workId: {
            type: 'string',
            format: 'uuid',
        },
        title: {
            type: 'string',
            example: 'Looking for software developer for new website',
            minLength: 20,
            maxLength: 200,
        },
        status: {
            $ref: '#/components/schemas/WorkStatusEnum',
        },
        workType: {
            $ref: '#/components/schemas/WorkTypeEnum',
        },
        duration: {
            type: 'integer',
            example: 10,
            description: 'months',
        },
        experience: {
            $ref: '#/components/schemas/ExperienceEnum',
        },
        location: {
            type: 'string',
            example: 'US',
        },
        applicationId: {
            type: 'string',
            format: 'uuid',
        },
        applicationStatus: {
            $ref: '#/components/schemas/ApplicationStatusEnum',
        },
    },
};
export const $CreateWorkRequest = {
    type: 'object',
    required: ['isDraft', 'workDetails'],
    properties: {
        workId: {
            type: 'string',
            format: 'uuid',
            description: 'If updating the record the ID needs to be provided',
        },
        isDraft: {
            type: 'boolean',
            description: 'This will be set when the job is not published',
        },
        workDetails: {
            $ref: '#/components/schemas/WorkDetails',
        },
    },
};
export const $WorkDetailsResponse = {
    type: 'object',
    properties: {
        workId: {
            type: 'string',
            format: 'uuid',
            description: 'If updating the record the ID needs to be provided',
        },
        applicationId: {
            type: 'string',
            format: 'uuid',
            description: 'If the logged in user applied to this work this will be returned',
        },
        applicationStatus: {
            $ref: '#/components/schemas/ApplicationStatusEnum',
            description: 'If the logged in user applied to this work this will be returned',
        },
        workDetails: {
            $ref: '#/components/schemas/WorkDetails',
        },
    },
};
export const $RetrieveMultipleWorkDetailsRequest = {
    type: 'object',
    properties: {
        workIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid',
            },
        },
    },
};
export const $RetrieveMultipleWorkDetailsResponse = {
    type: 'object',
    properties: {
        workDetailsList: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/WorkDetailsResponse',
            },
        },
    },
};
export const $FilteredWorkListRequest = {
    type: 'object',
    properties: {
        metadata: {
            type: 'object',
            properties: {
                page: {
                    type: 'integer',
                    minimum: 1,
                },
                pageSize: {
                    type: 'integer',
                    example: 8,
                    minimum: 1,
                    maximum: 60,
                },
            },
        },
        filters: {
            type: 'object',
            properties: {
                workTypeList: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/WorkTypeEnum',
                    },
                },
                experienceList: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/ExperienceEnum',
                    },
                },
                categoryList: {
                    type: 'array',
                    items: {
                        $ref: '#/components/schemas/WorkCategoryEnum',
                    },
                },
                countryIsoList: {
                    type: 'array',
                    items: {
                        type: 'string',
                        format: 'iso3166-1',
                        example: 'CA',
                    },
                },
                payment: {
                    type: 'object',
                    required: ['paymentType', 'min', 'max'],
                    properties: {
                        paymentType: {
                            $ref: '#/components/schemas/PaymentTypeEnum',
                        },
                        min: {
                            type: 'number',
                            example: 35.01,
                            minimum: 0,
                            maximum: 21474836,
                        },
                        max: {
                            type: 'number',
                            example: 110.1,
                            minimum: 0,
                            maximum: 21474836,
                        },
                    },
                },
            },
        },
        sort: {
            type: 'object',
            required: ['field', 'order'],
            properties: {
                field: {
                    type: 'string',
                    default: 'CREATED_AT',
                    enum: ['CREATED_AT', 'PAYMENT_AMOUNT', 'DURATION'],
                },
                order: {
                    type: 'string',
                    enum: ['ASC', 'DESC'],
                },
            },
        },
    },
};
export const $FilteredWorkListResponse = {
    type: 'object',
    properties: {
        locations: {
            type: 'array',
            description: 'This will be used to populate components',
            items: {
                type: 'string',
                format: 'iso3166-1',
                example: ['US', 'CA'],
            },
        },
        workList: {
            type: 'array',
            items: {
                type: 'object',
                $ref: '#/components/schemas/WorkOverview',
            },
        },
        metadata: {
            type: 'object',
            properties: {
                firstPage: {
                    type: 'integer',
                },
                currentPage: {
                    type: 'integer',
                },
                nextPage: {
                    type: 'integer',
                },
                lastPage: {
                    type: 'integer',
                },
                prevPage: {
                    type: 'integer',
                },
                totalCount: {
                    type: 'integer',
                },
            },
        },
    },
};
export const $CreateWorkResponse = {
    oneOf: [
        {
            $ref: '#/components/schemas/MetadataResponse',
        },
    ],
};
export const $Skills = {
    type: 'array',
    example: ['C++', 'Figma', 'Google Sheet'],
    items: {
        type: 'string',
    },
};
export const $PaymentCurrency = {
    type: 'string',
    format: 'iso4217',
    description: 'ISO4217 currency code',
    example: 'USD',
};
export const $PaymentAmount = {
    type: 'number',
    example: 35.21,
    minimum: 0,
    maximum: 21474836,
};
export const $MetadataResponse = {
    type: 'object',
    properties: {
        skills: {
            $ref: '#/components/schemas/Skills',
        },
        categories: {
            type: 'array',
            items: {
                example: ['Development', 'Design', 'Legal'],
            },
        },
        locations: {
            type: 'array',
            items: {
                example: ['UK', 'US', 'CA'],
            },
        },
    },
};
export const $BasePayment = {
    type: 'object',
    properties: {
        paymentAmount: {
            $ref: '#/components/schemas/PaymentAmount',
        },
        paymentCurrency: {
            $ref: '#/components/schemas/PaymentCurrency',
        },
        paymentType: {
            $ref: '#/components/schemas/PaymentTypeEnum',
        },
    },
};
export const $BaseContractTermination = {
    type: 'object',
    required: ['contractId', 'reason'],
    properties: {
        contractId: {
            type: 'string',
            format: 'uuid',
        },
        reason: {
            $ref: '#/components/schemas/TerminationReasonEnum',
        },
    },
};
export const $ContractClientTerminateRequest = {
    allOf: [
        {
            $ref: '#/components/schemas/BaseContractTermination',
        },
    ],
};
export const $ContractCraftspersonTerminateRequest = {
    allOf: [
        {
            $ref: '#/components/schemas/BaseContractTermination',
        },
    ],
};
export const $ApplyWorkRequest = {
    type: 'object',
    allOf: [
        {
            $ref: '#/components/schemas/BasePayment',
        },
    ],
    required: [
        'coverLetter',
        'paymentAmount',
        'paymentCurrency',
        'paymentType',
        'workId',
    ],
    properties: {
        workId: {
            type: 'string',
            format: 'uuid',
        },
        availabilityNotes: {
            type: 'string',
        },
        coverLetter: {
            type: 'string',
        },
        portfolio: {
            type: 'array',
            items: {
                type: 'string',
                description: 'portfolio item id',
                format: 'uuid',
            },
        },
    },
};
export const $ApplyWorkResponse = {
    type: 'object',
    properties: {
        applicationId: {
            type: 'string',
            format: 'uuid',
        },
    },
};
export const $ApplicationApprovalRequest = {
    type: 'object',
    required: ['applicationId', 'decision', 'startDate'],
    properties: {
        applicationId: {
            type: 'string',
            format: 'uuid',
            description: 'ID of the application',
        },
        decision: {
            type: 'boolean',
        },
        startDate: {
            type: 'string',
            format: 'date',
        },
    },
};
export const $WorkApprovalRequest = {
    type: 'object',
    required: ['applicationId', 'decision'],
    properties: {
        applicationId: {
            type: 'string',
            format: 'uuid',
            description: 'ID of the application',
        },
        decision: {
            type: 'boolean',
        },
    },
};
export const $WorkApprovalResponse = {
    type: 'object',
    properties: {
        contractId: {
            type: 'string',
            format: 'uuid',
        },
    },
};
export const $BaseActiveContract = {
    type: 'object',
    properties: {
        workId: {
            type: 'string',
            format: 'uuid',
        },
        title: {
            type: 'string',
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
        },
        workType: {
            $ref: '#/components/schemas/WorkTypeEnum',
        },
        status: {
            $ref: '#/components/schemas/WorkStatusEnum',
        },
        skills: {
            $ref: '#/components/schemas/Skills',
        },
    },
};
export const $ClientActiveContract = {
    allOf: [
        {
            $ref: '#/components/schemas/BaseActiveContract',
        },
    ],
    type: 'object',
    properties: {
        contracts: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ContractActiveClient',
            },
        },
    },
};
export const $CraftspersonActiveContract = {
    allOf: [
        {
            $ref: '#/components/schemas/BaseActiveContract',
        },
    ],
    type: 'object',
    properties: {
        contract: {
            $ref: '#/components/schemas/ContractActiveClient',
        },
    },
};
export const $ClientActiveContractsResponse = {
    type: 'object',
    properties: {
        workList: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ClientActiveContract',
            },
        },
    },
};
export const $CraftspersonActiveContractsResponse = {
    type: 'object',
    properties: {
        workList: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/CraftspersonActiveContract',
            },
        },
    },
};
export const $ClientPostingsResponse = {
    type: 'object',
    properties: {
        contract: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/ContractActiveClient',
            },
        },
    },
};
export const $CraftspersonApplicationOverview = {
    type: 'object',
    properties: {
        applications: {
            type: 'array',
            items: {
                allOf: [
                    {
                        $ref: '#/components/schemas/BasePayment',
                    },
                ],
                type: 'object',
                properties: {
                    workId: {
                        type: 'string',
                        format: 'uuid',
                    },
                    title: {
                        type: 'string',
                    },
                    workType: {
                        $ref: '#/components/schemas/WorkTypeEnum',
                    },
                    duration: {
                        type: 'integer',
                        description: 'in months',
                        example: 2,
                    },
                    workSkills: {
                        $ref: '#/components/schemas/Skills',
                    },
                    applicationId: {
                        type: 'string',
                        format: 'uuid',
                        description: 'ID of the application',
                    },
                    appliedAt: {
                        type: 'string',
                        format: 'date-time',
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'date-time',
                    },
                    applicationStatus: {
                        $ref: '#/components/schemas/ApplicationStatusEnum',
                    },
                    availabilityNotes: {
                        type: 'string',
                    },
                    coverLetter: {
                        type: 'string',
                    },
                    applicationPortfolio: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'portfolio item id',
                            format: 'uuid',
                        },
                    },
                },
            },
        },
    },
};
export const $WorkPostingsClient = {
    type: 'object',
    properties: {
        workList: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    workId: {
                        type: 'string',
                        format: 'uuid',
                    },
                    title: {
                        type: 'string',
                    },
                    createdAt: {
                        type: 'string',
                        format: 'date-time',
                    },
                    workType: {
                        $ref: '#/components/schemas/WorkTypeEnum',
                    },
                    status: {
                        $ref: '#/components/schemas/WorkStatusEnum',
                    },
                },
            },
        },
    },
};
export const $Applicant = {
    allOf: [
        {
            $ref: '#/components/schemas/BasePayment',
        },
    ],
    type: 'object',
    properties: {
        applicationId: {
            type: 'string',
            format: 'uuid',
            description: 'ID of the application',
        },
        isShortlisted: {
            type: 'boolean',
        },
        appliedAt: {
            type: 'string',
            format: 'date-time',
        },
        recommendationScore: {
            type: 'integer',
            minLength: 0,
            maxLength: 100,
        },
        applicationStatus: {
            $ref: '#/components/schemas/ApplicationStatusEnum',
        },
        availabilityNotes: {
            type: 'string',
        },
        coverLetter: {
            type: 'string',
        },
        portfolio: {
            type: 'array',
            items: {
                type: 'string',
                description: 'portfolio item id',
                format: 'uuid',
            },
        },
        craftsperson: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    example: 'John Doe',
                },
                selfProclaimedTitle: {
                    type: 'string',
                    example: 'Universal Sr of the Engineers',
                    maxLength: 40,
                },
                avatarUrl: {
                    type: 'string',
                    format: 'uri',
                },
                lastSeenMinutesAgo: {
                    type: 'integer',
                    example: 12,
                },
            },
        },
    },
};
export const $WorkPostingsDetailsResponse = {
    type: 'object',
    properties: {
        workId: {
            type: 'string',
            format: 'uuid',
        },
        title: {
            type: 'string',
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
        },
        workType: {
            $ref: '#/components/schemas/WorkTypeEnum',
        },
        status: {
            $ref: '#/components/schemas/WorkStatusEnum',
        },
        hired: {
            type: 'integer',
        },
        rejected: {
            type: 'integer',
        },
        shortlisted: {
            type: 'integer',
        },
        skills: {
            $ref: '#/components/schemas/Skills',
        },
        applicants: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Applicant',
            },
        },
    },
};
export const $ContractActiveClient = {
    allOf: [
        {
            $ref: '#/components/schemas/BaseClientContractActiveAndPosting',
        },
    ],
    type: 'object',
    properties: {
        contractId: {
            type: 'string',
            format: 'uuid',
        },
    },
};
export const $BaseClientContractActiveAndPosting = {
    type: 'object',
    allOf: [
        {
            $ref: '#/components/schemas/BasePayment',
        },
    ],
    properties: {
        contractId: {
            type: 'string',
            format: 'uuid',
        },
        contractStatus: {
            $ref: '#/components/schemas/ContractStatusEnum',
        },
        role: {
            type: 'string',
            example: 'Backend Developer',
        },
        startDate: {
            type: 'string',
            format: 'date',
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
        },
        terminatedAt: {
            type: 'string',
            format: 'date-time',
        },
        terminatedBy: {
            $ref: '#/components/schemas/TerminatedByEnum',
        },
        duration: {
            type: 'integer',
            description: 'in months',
            example: 2,
        },
        craftsperson: {
            type: 'object',
            properties: {
                craftspersonId: {
                    type: 'string',
                    format: 'uuid',
                },
                name: {
                    type: 'string',
                    example: 'John Doe',
                },
                avatarUrl: {
                    type: 'string',
                    format: 'uri',
                },
                lastSeenMinutesAgo: {
                    type: 'integer',
                    example: 12,
                },
            },
        },
        founder: {
            type: 'object',
            properties: {
                bonus: {
                    type: 'string',
                    example: '72%',
                },
                shares: {
                    type: 'integer',
                    example: '42',
                },
                fiatRate: {
                    type: 'string',
                    example: '14.70',
                },
                republicRate: {
                    type: 'string',
                    example: '71.26',
                },
            },
        },
    },
};
export const $ShortlistRequest = {
    type: 'object',
    required: ['workId', 'ccId'],
    properties: {
        workId: {
            type: 'string',
            format: 'uuid',
        },
        ccId: {
            type: 'string',
            description: 'CrowdCraft ID for the user',
        },
    },
};
export const $ShortlistResponse = {
    type: 'object',
    properties: {
        shortlistId: {
            type: 'string',
            format: 'uuid',
        },
    },
};
export const $RetrieveAllShortlistResponse = {
    type: 'object',
    properties: {
        shortlistedList: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    ccId: {
                        type: 'string',
                        format: 'uuid',
                    },
                },
            },
        },
    },
};
export const $MetricsSummaryResponse = {
    type: 'object',
    properties: {
        activeContracts: {
            type: 'integer',
        },
        pendingContractApproval: {
            type: 'integer',
        },
        craftsperson: {
            type: 'object',
            properties: {
                totalAppliedWork: {
                    type: 'integer',
                },
            },
        },
        client: {
            type: 'object',
            properties: {
                activeJobPostings: {
                    type: 'integer',
                },
                totalDrafts: {
                    type: 'integer',
                },
                totalHired: {
                    type: 'integer',
                },
                totalApplicationsRejected: {
                    type: 'integer',
                },
                totalWork: {
                    type: 'integer',
                },
                gigs: {
                    type: 'integer',
                },
                tasks: {
                    type: 'integer',
                },
                tournament: {
                    type: 'integer',
                },
            },
        },
    },
};
export const $ErrorResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'WORKERR001',
        },
        message: {
            type: 'string',
            example: 'Internal Error',
        },
    },
};
//# sourceMappingURL=schemas.gen.js.map