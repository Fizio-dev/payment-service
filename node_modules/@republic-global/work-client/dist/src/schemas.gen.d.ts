export declare const $WorkStatusEnum: {
    readonly type: "string";
    readonly enum: readonly ["OPEN", "DRAFT", "CLOSED"];
};
export declare const $WorkTypeEnum: {
    readonly type: "string";
    readonly default: "GIG";
    readonly enum: readonly ["GIG", "TOURNAMENT", "TASK", "DATA_LABELING_TASK"];
};
export declare const $WorkCategoryEnum: {
    readonly type: "string";
    readonly default: "DESIGN";
    readonly enum: readonly ["DESIGN", "DATA_SCIENCE", "LEGAL", "CUSTOMER_SERVICE", "TRANSLATION", "WEB_MOBILE_DEVELOPMENT", "IT_CLOUD_NETWORKING", "ARCHITECTURE", "DESKTOP_DEVELOPMENT"];
};
export declare const $PaymentFrequencyEnum: {
    readonly type: "string";
    readonly default: "HOURLY";
    readonly enum: readonly ["MONTHLY", "WEEKLY", "HOURLY"];
};
export declare const $PaymentTypeEnum: {
    readonly type: "string";
    readonly default: "HOURLY";
    readonly enum: readonly ["FIXED", "PRIZE_POOL", "HOURLY"];
};
export declare const $ContractStatusEnum: {
    readonly type: "string";
    readonly default: "ACTIVE";
    readonly enum: readonly ["ACTIVE", "INACTIVE"];
};
export declare const $ExperienceEnum: {
    readonly type: "string";
    readonly default: "EXPERT";
    readonly enum: readonly ["NO_EXPERIENCE", "ENTRY", "INTERMEDIATE", "EXPERT"];
};
export declare const $TerminationReasonEnum: {
    readonly type: "string";
    readonly default: "FINISHED_SUCCESSFULLY";
    readonly enum: readonly ["UNCLEAR_INSTRUCTIONS", "FAILED_TO_COMMUNICATE", "PAYMENT_ISSUE", "FINISHED_SUCCESSFULLY", "UNABLE_TO_COLLABORATE", "NEW_CONTRACT_WILL_BE_CREATED", "OTHER"];
};
export declare const $TerminatedByEnum: {
    readonly type: "string";
    readonly enum: readonly ["CLIENT", "CRAFTSPERSON", "SYSTEM"];
};
export declare const $ApplicationStatusEnum: {
    readonly type: "string";
    readonly default: "APPLIED";
    readonly enum: readonly ["APPLIED", "CRAFTSPERSON_WITHDREW", "CRAFTSPERSON_REJECTED_CONTRACT", "APPROVED_BY_CLIENT", "REJECTED", "ACCEPTED"];
};
export declare const $WorkDetails: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BasePayment";
    }];
    readonly required: readonly ["title", "workType", "category", "duration", "minAvailability", "paymentAmount", "paymentCurrency", "paymentType", "skills", "experience", "description", "agreements", "officeAttendanceRequired"];
    readonly properties: {
        readonly title: {
            readonly type: "string";
            readonly example: "Looking for software developer for new website";
            readonly minLength: 20;
            readonly maxLength: 200;
        };
        readonly status: {
            readonly $ref: "#/components/schemas/WorkStatusEnum";
        };
        readonly createdAt: {
            readonly type: "string";
            readonly format: "date-time";
        };
        readonly workType: {
            readonly $ref: "#/components/schemas/WorkTypeEnum";
        };
        readonly category: {
            readonly $ref: "#/components/schemas/WorkCategoryEnum";
        };
        readonly duration: {
            readonly type: "integer";
            readonly description: "months";
        };
        readonly minAvailability: {
            readonly type: "integer";
            readonly description: "hours a week";
            readonly example: 40;
            readonly minimum: 1;
            readonly maximum: 120;
        };
        readonly skills: {
            readonly $ref: "#/components/schemas/Skills";
        };
        readonly experience: {
            readonly $ref: "#/components/schemas/ExperienceEnum";
        };
        readonly description: {
            readonly type: "string";
            readonly example: "## Overview\\nOur new product will be launched soon and we are looking for a skilled set of professionals";
            readonly description: "This is a markdown description";
            readonly minLength: 80;
            readonly maxLength: 15000;
        };
        readonly agreements: {
            readonly type: "array";
            readonly example: readonly ["1468b202-86f2-4193-b351-c5cf650a08b7", "0ed588fe-a8e7-418b-b03a-a192e128bd3d"];
            readonly items: {
                readonly type: "string";
            };
        };
        readonly officeAttendanceRequired: {
            readonly type: "boolean";
        };
        readonly officeLocation: {
            readonly type: "object";
            readonly required: readonly ["address", "countryIso", "state", "city"];
            readonly properties: {
                readonly address: {
                    readonly type: "string";
                    readonly example: "395 Main Terrace, Aurora, Colorado, 80010, United States";
                    readonly minLength: 10;
                    readonly maxLength: 300;
                };
                readonly latitude: {
                    readonly type: "string";
                    readonly example: "40.7128";
                };
                readonly longitude: {
                    readonly type: "string";
                    readonly example: "-74.0060";
                };
                readonly countryIso: {
                    readonly type: "string";
                    readonly format: "iso3166-1";
                    readonly example: "CA";
                    readonly minLength: 2;
                    readonly maxLength: 2;
                };
                readonly state: {
                    readonly type: "string";
                    readonly example: "Ontario";
                    readonly minLength: 1;
                    readonly maxLength: 200;
                };
                readonly city: {
                    readonly type: "string";
                    readonly example: "Ottawa";
                    readonly minLength: 1;
                    readonly maxLength: 200;
                };
            };
        };
        readonly allowedCountries: {
            readonly type: "array";
            readonly format: "iso3166-1";
            readonly example: readonly ["UK", "US"];
        };
    };
};
export declare const $WorkOverview: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BasePayment";
    }];
    readonly properties: {
        readonly workId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly title: {
            readonly type: "string";
            readonly example: "Looking for software developer for new website";
            readonly minLength: 20;
            readonly maxLength: 200;
        };
        readonly status: {
            readonly $ref: "#/components/schemas/WorkStatusEnum";
        };
        readonly workType: {
            readonly $ref: "#/components/schemas/WorkTypeEnum";
        };
        readonly duration: {
            readonly type: "integer";
            readonly example: 10;
            readonly description: "months";
        };
        readonly experience: {
            readonly $ref: "#/components/schemas/ExperienceEnum";
        };
        readonly location: {
            readonly type: "string";
            readonly example: "US";
        };
        readonly applicationId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly applicationStatus: {
            readonly $ref: "#/components/schemas/ApplicationStatusEnum";
        };
    };
};
export declare const $CreateWorkRequest: {
    readonly type: "object";
    readonly required: readonly ["isDraft", "workDetails"];
    readonly properties: {
        readonly workId: {
            readonly type: "string";
            readonly format: "uuid";
            readonly description: "If updating the record the ID needs to be provided";
        };
        readonly isDraft: {
            readonly type: "boolean";
            readonly description: "This will be set when the job is not published";
        };
        readonly workDetails: {
            readonly $ref: "#/components/schemas/WorkDetails";
        };
    };
};
export declare const $WorkDetailsResponse: {
    readonly type: "object";
    readonly properties: {
        readonly workId: {
            readonly type: "string";
            readonly format: "uuid";
            readonly description: "If updating the record the ID needs to be provided";
        };
        readonly applicationId: {
            readonly type: "string";
            readonly format: "uuid";
            readonly description: "If the logged in user applied to this work this will be returned";
        };
        readonly applicationStatus: {
            readonly $ref: "#/components/schemas/ApplicationStatusEnum";
            readonly description: "If the logged in user applied to this work this will be returned";
        };
        readonly workDetails: {
            readonly $ref: "#/components/schemas/WorkDetails";
        };
    };
};
export declare const $RetrieveMultipleWorkDetailsRequest: {
    readonly type: "object";
    readonly properties: {
        readonly workIds: {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
                readonly format: "uuid";
            };
        };
    };
};
export declare const $RetrieveMultipleWorkDetailsResponse: {
    readonly type: "object";
    readonly properties: {
        readonly workDetailsList: {
            readonly type: "array";
            readonly items: {
                readonly $ref: "#/components/schemas/WorkDetailsResponse";
            };
        };
    };
};
export declare const $FilteredWorkListRequest: {
    readonly type: "object";
    readonly properties: {
        readonly metadata: {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                };
                readonly pageSize: {
                    readonly type: "integer";
                    readonly example: 8;
                    readonly minimum: 1;
                    readonly maximum: 60;
                };
            };
        };
        readonly filters: {
            readonly type: "object";
            readonly properties: {
                readonly workTypeList: {
                    readonly type: "array";
                    readonly items: {
                        readonly $ref: "#/components/schemas/WorkTypeEnum";
                    };
                };
                readonly experienceList: {
                    readonly type: "array";
                    readonly items: {
                        readonly $ref: "#/components/schemas/ExperienceEnum";
                    };
                };
                readonly categoryList: {
                    readonly type: "array";
                    readonly items: {
                        readonly $ref: "#/components/schemas/WorkCategoryEnum";
                    };
                };
                readonly countryIsoList: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly format: "iso3166-1";
                        readonly example: "CA";
                    };
                };
                readonly payment: {
                    readonly type: "object";
                    readonly required: readonly ["paymentType", "min", "max"];
                    readonly properties: {
                        readonly paymentType: {
                            readonly $ref: "#/components/schemas/PaymentTypeEnum";
                        };
                        readonly min: {
                            readonly type: "number";
                            readonly example: 35.01;
                            readonly minimum: 0;
                            readonly maximum: 21474836;
                        };
                        readonly max: {
                            readonly type: "number";
                            readonly example: 110.1;
                            readonly minimum: 0;
                            readonly maximum: 21474836;
                        };
                    };
                };
            };
        };
        readonly sort: {
            readonly type: "object";
            readonly required: readonly ["field", "order"];
            readonly properties: {
                readonly field: {
                    readonly type: "string";
                    readonly default: "CREATED_AT";
                    readonly enum: readonly ["CREATED_AT", "PAYMENT_AMOUNT", "DURATION"];
                };
                readonly order: {
                    readonly type: "string";
                    readonly enum: readonly ["ASC", "DESC"];
                };
            };
        };
    };
};
export declare const $FilteredWorkListResponse: {
    readonly type: "object";
    readonly properties: {
        readonly locations: {
            readonly type: "array";
            readonly description: "This will be used to populate components";
            readonly items: {
                readonly type: "string";
                readonly format: "iso3166-1";
                readonly example: readonly ["US", "CA"];
            };
        };
        readonly workList: {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly $ref: "#/components/schemas/WorkOverview";
            };
        };
        readonly metadata: {
            readonly type: "object";
            readonly properties: {
                readonly firstPage: {
                    readonly type: "integer";
                };
                readonly currentPage: {
                    readonly type: "integer";
                };
                readonly nextPage: {
                    readonly type: "integer";
                };
                readonly lastPage: {
                    readonly type: "integer";
                };
                readonly prevPage: {
                    readonly type: "integer";
                };
                readonly totalCount: {
                    readonly type: "integer";
                };
            };
        };
    };
};
export declare const $CreateWorkResponse: {
    readonly oneOf: readonly [{
        readonly $ref: "#/components/schemas/MetadataResponse";
    }];
};
export declare const $Skills: {
    readonly type: "array";
    readonly example: readonly ["C++", "Figma", "Google Sheet"];
    readonly items: {
        readonly type: "string";
    };
};
export declare const $PaymentCurrency: {
    readonly type: "string";
    readonly format: "iso4217";
    readonly description: "ISO4217 currency code";
    readonly example: "USD";
};
export declare const $PaymentAmount: {
    readonly type: "number";
    readonly example: 35.21;
    readonly minimum: 0;
    readonly maximum: 21474836;
};
export declare const $MetadataResponse: {
    readonly type: "object";
    readonly properties: {
        readonly skills: {
            readonly $ref: "#/components/schemas/Skills";
        };
        readonly categories: {
            readonly type: "array";
            readonly items: {
                readonly example: readonly ["Development", "Design", "Legal"];
            };
        };
        readonly locations: {
            readonly type: "array";
            readonly items: {
                readonly example: readonly ["UK", "US", "CA"];
            };
        };
    };
};
export declare const $BasePayment: {
    readonly type: "object";
    readonly properties: {
        readonly paymentAmount: {
            readonly $ref: "#/components/schemas/PaymentAmount";
        };
        readonly paymentCurrency: {
            readonly $ref: "#/components/schemas/PaymentCurrency";
        };
        readonly paymentType: {
            readonly $ref: "#/components/schemas/PaymentTypeEnum";
        };
    };
};
export declare const $BaseContractTermination: {
    readonly type: "object";
    readonly required: readonly ["contractId", "reason"];
    readonly properties: {
        readonly contractId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly reason: {
            readonly $ref: "#/components/schemas/TerminationReasonEnum";
        };
    };
};
export declare const $ContractClientTerminateRequest: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BaseContractTermination";
    }];
};
export declare const $ContractCraftspersonTerminateRequest: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BaseContractTermination";
    }];
};
export declare const $ApplyWorkRequest: {
    readonly type: "object";
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BasePayment";
    }];
    readonly required: readonly ["coverLetter", "paymentAmount", "paymentCurrency", "paymentType", "workId"];
    readonly properties: {
        readonly workId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly availabilityNotes: {
            readonly type: "string";
        };
        readonly coverLetter: {
            readonly type: "string";
        };
        readonly portfolio: {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
                readonly description: "portfolio item id";
                readonly format: "uuid";
            };
        };
    };
};
export declare const $ApplyWorkResponse: {
    readonly type: "object";
    readonly properties: {
        readonly applicationId: {
            readonly type: "string";
            readonly format: "uuid";
        };
    };
};
export declare const $ApplicationApprovalRequest: {
    readonly type: "object";
    readonly required: readonly ["applicationId", "decision", "startDate"];
    readonly properties: {
        readonly applicationId: {
            readonly type: "string";
            readonly format: "uuid";
            readonly description: "ID of the application";
        };
        readonly decision: {
            readonly type: "boolean";
        };
        readonly startDate: {
            readonly type: "string";
            readonly format: "date";
        };
    };
};
export declare const $WorkApprovalRequest: {
    readonly type: "object";
    readonly required: readonly ["applicationId", "decision"];
    readonly properties: {
        readonly applicationId: {
            readonly type: "string";
            readonly format: "uuid";
            readonly description: "ID of the application";
        };
        readonly decision: {
            readonly type: "boolean";
        };
    };
};
export declare const $WorkApprovalResponse: {
    readonly type: "object";
    readonly properties: {
        readonly contractId: {
            readonly type: "string";
            readonly format: "uuid";
        };
    };
};
export declare const $BaseActiveContract: {
    readonly type: "object";
    readonly properties: {
        readonly workId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly title: {
            readonly type: "string";
        };
        readonly createdAt: {
            readonly type: "string";
            readonly format: "date-time";
        };
        readonly workType: {
            readonly $ref: "#/components/schemas/WorkTypeEnum";
        };
        readonly status: {
            readonly $ref: "#/components/schemas/WorkStatusEnum";
        };
        readonly skills: {
            readonly $ref: "#/components/schemas/Skills";
        };
    };
};
export declare const $ClientActiveContract: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BaseActiveContract";
    }];
    readonly type: "object";
    readonly properties: {
        readonly contracts: {
            readonly type: "array";
            readonly items: {
                readonly $ref: "#/components/schemas/ContractActiveClient";
            };
        };
    };
};
export declare const $CraftspersonActiveContract: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BaseActiveContract";
    }];
    readonly type: "object";
    readonly properties: {
        readonly contract: {
            readonly $ref: "#/components/schemas/ContractActiveClient";
        };
    };
};
export declare const $ClientActiveContractsResponse: {
    readonly type: "object";
    readonly properties: {
        readonly workList: {
            readonly type: "array";
            readonly items: {
                readonly $ref: "#/components/schemas/ClientActiveContract";
            };
        };
    };
};
export declare const $CraftspersonActiveContractsResponse: {
    readonly type: "object";
    readonly properties: {
        readonly workList: {
            readonly type: "array";
            readonly items: {
                readonly $ref: "#/components/schemas/CraftspersonActiveContract";
            };
        };
    };
};
export declare const $ClientPostingsResponse: {
    readonly type: "object";
    readonly properties: {
        readonly contract: {
            readonly type: "array";
            readonly items: {
                readonly $ref: "#/components/schemas/ContractActiveClient";
            };
        };
    };
};
export declare const $CraftspersonApplicationOverview: {
    readonly type: "object";
    readonly properties: {
        readonly applications: {
            readonly type: "array";
            readonly items: {
                readonly allOf: readonly [{
                    readonly $ref: "#/components/schemas/BasePayment";
                }];
                readonly type: "object";
                readonly properties: {
                    readonly workId: {
                        readonly type: "string";
                        readonly format: "uuid";
                    };
                    readonly title: {
                        readonly type: "string";
                    };
                    readonly workType: {
                        readonly $ref: "#/components/schemas/WorkTypeEnum";
                    };
                    readonly duration: {
                        readonly type: "integer";
                        readonly description: "in months";
                        readonly example: 2;
                    };
                    readonly workSkills: {
                        readonly $ref: "#/components/schemas/Skills";
                    };
                    readonly applicationId: {
                        readonly type: "string";
                        readonly format: "uuid";
                        readonly description: "ID of the application";
                    };
                    readonly appliedAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly applicationStatus: {
                        readonly $ref: "#/components/schemas/ApplicationStatusEnum";
                    };
                    readonly availabilityNotes: {
                        readonly type: "string";
                    };
                    readonly coverLetter: {
                        readonly type: "string";
                    };
                    readonly applicationPortfolio: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "portfolio item id";
                            readonly format: "uuid";
                        };
                    };
                };
            };
        };
    };
};
export declare const $WorkPostingsClient: {
    readonly type: "object";
    readonly properties: {
        readonly workList: {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly workId: {
                        readonly type: "string";
                        readonly format: "uuid";
                    };
                    readonly title: {
                        readonly type: "string";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                    };
                    readonly workType: {
                        readonly $ref: "#/components/schemas/WorkTypeEnum";
                    };
                    readonly status: {
                        readonly $ref: "#/components/schemas/WorkStatusEnum";
                    };
                };
            };
        };
    };
};
export declare const $Applicant: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BasePayment";
    }];
    readonly type: "object";
    readonly properties: {
        readonly applicationId: {
            readonly type: "string";
            readonly format: "uuid";
            readonly description: "ID of the application";
        };
        readonly isShortlisted: {
            readonly type: "boolean";
        };
        readonly appliedAt: {
            readonly type: "string";
            readonly format: "date-time";
        };
        readonly recommendationScore: {
            readonly type: "integer";
            readonly minLength: 0;
            readonly maxLength: 100;
        };
        readonly applicationStatus: {
            readonly $ref: "#/components/schemas/ApplicationStatusEnum";
        };
        readonly availabilityNotes: {
            readonly type: "string";
        };
        readonly coverLetter: {
            readonly type: "string";
        };
        readonly portfolio: {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
                readonly description: "portfolio item id";
                readonly format: "uuid";
            };
        };
        readonly craftsperson: {
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly example: "John Doe";
                };
                readonly selfProclaimedTitle: {
                    readonly type: "string";
                    readonly example: "Universal Sr of the Engineers";
                    readonly maxLength: 40;
                };
                readonly avatarUrl: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly lastSeenMinutesAgo: {
                    readonly type: "integer";
                    readonly example: 12;
                };
            };
        };
    };
};
export declare const $WorkPostingsDetailsResponse: {
    readonly type: "object";
    readonly properties: {
        readonly workId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly title: {
            readonly type: "string";
        };
        readonly createdAt: {
            readonly type: "string";
            readonly format: "date-time";
        };
        readonly workType: {
            readonly $ref: "#/components/schemas/WorkTypeEnum";
        };
        readonly status: {
            readonly $ref: "#/components/schemas/WorkStatusEnum";
        };
        readonly hired: {
            readonly type: "integer";
        };
        readonly rejected: {
            readonly type: "integer";
        };
        readonly shortlisted: {
            readonly type: "integer";
        };
        readonly skills: {
            readonly $ref: "#/components/schemas/Skills";
        };
        readonly applicants: {
            readonly type: "array";
            readonly items: {
                readonly $ref: "#/components/schemas/Applicant";
            };
        };
    };
};
export declare const $ContractActiveClient: {
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BaseClientContractActiveAndPosting";
    }];
    readonly type: "object";
    readonly properties: {
        readonly contractId: {
            readonly type: "string";
            readonly format: "uuid";
        };
    };
};
export declare const $BaseClientContractActiveAndPosting: {
    readonly type: "object";
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/BasePayment";
    }];
    readonly properties: {
        readonly contractId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly contractStatus: {
            readonly $ref: "#/components/schemas/ContractStatusEnum";
        };
        readonly role: {
            readonly type: "string";
            readonly example: "Backend Developer";
        };
        readonly startDate: {
            readonly type: "string";
            readonly format: "date";
        };
        readonly createdAt: {
            readonly type: "string";
            readonly format: "date-time";
        };
        readonly terminatedAt: {
            readonly type: "string";
            readonly format: "date-time";
        };
        readonly terminatedBy: {
            readonly $ref: "#/components/schemas/TerminatedByEnum";
        };
        readonly duration: {
            readonly type: "integer";
            readonly description: "in months";
            readonly example: 2;
        };
        readonly craftsperson: {
            readonly type: "object";
            readonly properties: {
                readonly craftspersonId: {
                    readonly type: "string";
                    readonly format: "uuid";
                };
                readonly name: {
                    readonly type: "string";
                    readonly example: "John Doe";
                };
                readonly avatarUrl: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly lastSeenMinutesAgo: {
                    readonly type: "integer";
                    readonly example: 12;
                };
            };
        };
        readonly founder: {
            readonly type: "object";
            readonly properties: {
                readonly bonus: {
                    readonly type: "string";
                    readonly example: "72%";
                };
                readonly shares: {
                    readonly type: "integer";
                    readonly example: "42";
                };
                readonly fiatRate: {
                    readonly type: "string";
                    readonly example: "14.70";
                };
                readonly republicRate: {
                    readonly type: "string";
                    readonly example: "71.26";
                };
            };
        };
    };
};
export declare const $ShortlistRequest: {
    readonly type: "object";
    readonly required: readonly ["workId", "ccId"];
    readonly properties: {
        readonly workId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly ccId: {
            readonly type: "string";
            readonly description: "CrowdCraft ID for the user";
        };
    };
};
export declare const $ShortlistResponse: {
    readonly type: "object";
    readonly properties: {
        readonly shortlistId: {
            readonly type: "string";
            readonly format: "uuid";
        };
    };
};
export declare const $RetrieveAllShortlistResponse: {
    readonly type: "object";
    readonly properties: {
        readonly shortlistedList: {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly ccId: {
                        readonly type: "string";
                        readonly format: "uuid";
                    };
                };
            };
        };
    };
};
export declare const $MetricsSummaryResponse: {
    readonly type: "object";
    readonly properties: {
        readonly activeContracts: {
            readonly type: "integer";
        };
        readonly pendingContractApproval: {
            readonly type: "integer";
        };
        readonly craftsperson: {
            readonly type: "object";
            readonly properties: {
                readonly totalAppliedWork: {
                    readonly type: "integer";
                };
            };
        };
        readonly client: {
            readonly type: "object";
            readonly properties: {
                readonly activeJobPostings: {
                    readonly type: "integer";
                };
                readonly totalDrafts: {
                    readonly type: "integer";
                };
                readonly totalHired: {
                    readonly type: "integer";
                };
                readonly totalApplicationsRejected: {
                    readonly type: "integer";
                };
                readonly totalWork: {
                    readonly type: "integer";
                };
                readonly gigs: {
                    readonly type: "integer";
                };
                readonly tasks: {
                    readonly type: "integer";
                };
                readonly tournament: {
                    readonly type: "integer";
                };
            };
        };
    };
};
export declare const $ErrorResponse: {
    readonly type: "object";
    readonly properties: {
        readonly code: {
            readonly type: "string";
            readonly example: "WORKERR001";
        };
        readonly message: {
            readonly type: "string";
            readonly example: "Internal Error";
        };
    };
};
//# sourceMappingURL=schemas.gen.d.ts.map