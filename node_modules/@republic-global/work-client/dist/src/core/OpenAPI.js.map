{"version":3,"file":"OpenAPI.js","sourceRoot":"","sources":["../../../src/core/OpenAPI.ts"],"names":[],"mappings":"AAMA,MAAM,OAAO,YAAY;IACrB,IAAI,CAAkB;IAEtB;QACI,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,EAAiB;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,GAAG;gBACR,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;gBAC5B,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;aAChC,CAAC;QACN,CAAC;IACL,CAAC;IAED,GAAG,CAAC,EAAiB;QACjB,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC;CACJ;AAkBD,MAAM,CAAC,MAAM,OAAO,GAAkB;IAClC,IAAI,EAAE,kDAAkD;IACxD,WAAW,EAAE,SAAS;IACtB,WAAW,EAAE,SAAS;IACtB,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,SAAS;IACnB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,OAAO;IAChB,gBAAgB,EAAE,KAAK;IACvB,YAAY,EAAE;QACV,OAAO,EAAE,IAAI,YAAY,EAAE;QAC3B,QAAQ,EAAE,IAAI,YAAY,EAAE;KAC/B;CACJ,CAAC","sourcesContent":["import type { ApiRequestOptions } from './ApiRequestOptions.js';\n\ntype Headers = Record<string, string>;\ntype Middleware<T> = (value: T) => T | Promise<T>;\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nexport class Interceptors<T> {\n    _fns: Middleware<T>[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    eject(fn: Middleware<T>): void {\n        const index = this._fns.indexOf(fn);\n        if (index !== -1) {\n            this._fns = [\n                ...this._fns.slice(0, index),\n                ...this._fns.slice(index + 1),\n            ];\n        }\n    }\n\n    use(fn: Middleware<T>): void {\n        this._fns = [...this._fns, fn];\n    }\n}\n\nexport type OpenAPIConfig = {\n    BASE: string;\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\n    ENCODE_PATH?: ((path: string) => string) | undefined;\n    HEADERS?: Headers | Resolver<Headers> | undefined;\n    PASSWORD?: string | Resolver<string> | undefined;\n    TOKEN?: string | Resolver<string> | undefined;\n    USERNAME?: string | Resolver<string> | undefined;\n    VERSION: string;\n    WITH_CREDENTIALS: boolean;\n    interceptors: {\n        request: Interceptors<RequestInit>;\n        response: Interceptors<Response>;\n    };\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n    BASE: 'http://localhost:3000/crowdcraft-work-service/v1',\n    CREDENTIALS: 'include',\n    ENCODE_PATH: undefined,\n    HEADERS: undefined,\n    PASSWORD: undefined,\n    TOKEN: undefined,\n    USERNAME: undefined,\n    VERSION: '1.0.0',\n    WITH_CREDENTIALS: false,\n    interceptors: {\n        request: new Interceptors(),\n        response: new Interceptors(),\n    },\n};\n"]}