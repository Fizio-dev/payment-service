export type WorkStatusEnum = 'OPEN' | 'DRAFT' | 'CLOSED';
export type WorkTypeEnum = 'GIG' | 'TOURNAMENT' | 'TASK' | 'DATA_LABELING_TASK';
export type WorkCategoryEnum = 'DESIGN' | 'DATA_SCIENCE' | 'LEGAL' | 'CUSTOMER_SERVICE' | 'TRANSLATION' | 'WEB_MOBILE_DEVELOPMENT' | 'IT_CLOUD_NETWORKING' | 'ARCHITECTURE' | 'DESKTOP_DEVELOPMENT';
export type PaymentFrequencyEnum = 'MONTHLY' | 'WEEKLY' | 'HOURLY';
export type PaymentTypeEnum = 'FIXED' | 'PRIZE_POOL' | 'HOURLY';
export type ContractStatusEnum = 'ACTIVE' | 'INACTIVE';
export type ExperienceEnum = 'NO_EXPERIENCE' | 'ENTRY' | 'INTERMEDIATE' | 'EXPERT';
export type TerminationReasonEnum = 'UNCLEAR_INSTRUCTIONS' | 'FAILED_TO_COMMUNICATE' | 'PAYMENT_ISSUE' | 'FINISHED_SUCCESSFULLY' | 'UNABLE_TO_COLLABORATE' | 'NEW_CONTRACT_WILL_BE_CREATED' | 'OTHER';
export type TerminatedByEnum = 'CLIENT' | 'CRAFTSPERSON' | 'SYSTEM';
export type ApplicationStatusEnum = 'APPLIED' | 'CRAFTSPERSON_WITHDREW' | 'CRAFTSPERSON_REJECTED_CONTRACT' | 'APPROVED_BY_CLIENT' | 'REJECTED' | 'ACCEPTED';
export type WorkDetails = BasePayment & {
    paymentAmount: PaymentAmount;
    paymentCurrency: PaymentCurrency;
    paymentType: PaymentTypeEnum;
    title: string;
    status?: WorkStatusEnum;
    createdAt?: string;
    workType: WorkTypeEnum;
    category: WorkCategoryEnum;
    /**
     * months
     */
    duration: number;
    /**
     * hours a week
     */
    minAvailability: number;
    skills: Skills;
    experience: ExperienceEnum;
    /**
     * This is a markdown description
     */
    description: string;
    agreements: Array<string>;
    officeAttendanceRequired: boolean;
    officeLocation?: {
        address: string;
        latitude?: string;
        longitude?: string;
        countryIso: string;
        state: string;
        city: string;
    };
    allowedCountries?: unknown[];
};
export type WorkOverview = BasePayment & {
    workId?: string;
    title?: string;
    status?: WorkStatusEnum;
    workType?: WorkTypeEnum;
    /**
     * months
     */
    duration?: number;
    experience?: ExperienceEnum;
    location?: string;
    applicationId?: string;
    applicationStatus?: ApplicationStatusEnum;
};
export type CreateWorkRequest = {
    /**
     * If updating the record the ID needs to be provided
     */
    workId?: string;
    /**
     * This will be set when the job is not published
     */
    isDraft: boolean;
    workDetails: WorkDetails;
};
export type WorkDetailsResponse = {
    /**
     * If updating the record the ID needs to be provided
     */
    workId?: string;
    /**
     * If the logged in user applied to this work this will be returned
     */
    applicationId?: string;
    /**
     * If the logged in user applied to this work this will be returned
     */
    applicationStatus?: ApplicationStatusEnum;
    workDetails?: WorkDetails;
};
export type RetrieveMultipleWorkDetailsRequest = {
    workIds?: Array<string>;
};
export type RetrieveMultipleWorkDetailsResponse = {
    workDetailsList?: Array<WorkDetailsResponse>;
};
export type FilteredWorkListRequest = {
    metadata?: {
        page?: number;
        pageSize?: number;
    };
    filters?: {
        workTypeList?: Array<WorkTypeEnum>;
        experienceList?: Array<ExperienceEnum>;
        categoryList?: Array<WorkCategoryEnum>;
        countryIsoList?: Array<string>;
        payment?: {
            paymentType: PaymentTypeEnum;
            min: number;
            max: number;
        };
    };
    sort?: {
        field: 'CREATED_AT' | 'PAYMENT_AMOUNT' | 'DURATION';
        order: 'ASC' | 'DESC';
    };
};
export type field = 'CREATED_AT' | 'PAYMENT_AMOUNT' | 'DURATION';
export type order = 'ASC' | 'DESC';
export type FilteredWorkListResponse = {
    /**
     * This will be used to populate components
     */
    locations?: Array<string>;
    workList?: Array<WorkOverview>;
    metadata?: {
        firstPage?: number;
        currentPage?: number;
        nextPage?: number;
        lastPage?: number;
        prevPage?: number;
        totalCount?: number;
    };
};
export type CreateWorkResponse = MetadataResponse;
export type Skills = Array<string>;
/**
 * ISO4217 currency code
 */
export type PaymentCurrency = string;
export type PaymentAmount = number;
export type MetadataResponse = {
    skills?: Skills;
    categories?: Array<unknown>;
    locations?: Array<unknown>;
};
export type BasePayment = {
    paymentAmount?: PaymentAmount;
    paymentCurrency?: PaymentCurrency;
    paymentType?: PaymentTypeEnum;
};
export type BaseContractTermination = {
    contractId: string;
    reason: TerminationReasonEnum;
};
export type ContractClientTerminateRequest = BaseContractTermination;
export type ContractCraftspersonTerminateRequest = BaseContractTermination;
export type ApplyWorkRequest = BasePayment & {
    paymentAmount: PaymentAmount;
    paymentCurrency: PaymentCurrency;
    paymentType: PaymentTypeEnum;
    workId: string;
    availabilityNotes?: string;
    coverLetter: string;
    portfolio?: Array<string>;
};
export type ApplyWorkResponse = {
    applicationId?: string;
};
export type ApplicationApprovalRequest = {
    /**
     * ID of the application
     */
    applicationId: string;
    decision: boolean;
    startDate: string;
};
export type WorkApprovalRequest = {
    /**
     * ID of the application
     */
    applicationId: string;
    decision: boolean;
};
export type WorkApprovalResponse = {
    contractId?: string;
};
export type BaseActiveContract = {
    workId?: string;
    title?: string;
    createdAt?: string;
    workType?: WorkTypeEnum;
    status?: WorkStatusEnum;
    skills?: Skills;
};
export type ClientActiveContract = BaseActiveContract & {
    contracts?: Array<ContractActiveClient>;
};
export type CraftspersonActiveContract = BaseActiveContract & {
    contract?: ContractActiveClient;
};
export type ClientActiveContractsResponse = {
    workList?: Array<ClientActiveContract>;
};
export type CraftspersonActiveContractsResponse = {
    workList?: Array<CraftspersonActiveContract>;
};
export type ClientPostingsResponse = {
    contract?: Array<ContractActiveClient>;
};
export type CraftspersonApplicationOverview = {
    applications?: Array<BasePayment & {
        workId?: string;
        title?: string;
        workType?: WorkTypeEnum;
        /**
         * in months
         */
        duration?: number;
        workSkills?: Skills;
        /**
         * ID of the application
         */
        applicationId?: string;
        appliedAt?: string;
        updatedAt?: string;
        applicationStatus?: ApplicationStatusEnum;
        availabilityNotes?: string;
        coverLetter?: string;
        applicationPortfolio?: Array<string>;
    }>;
};
export type WorkPostingsClient = {
    workList?: Array<{
        workId?: string;
        title?: string;
        createdAt?: string;
        workType?: WorkTypeEnum;
        status?: WorkStatusEnum;
    }>;
};
export type Applicant = BasePayment & {
    /**
     * ID of the application
     */
    applicationId?: string;
    isShortlisted?: boolean;
    appliedAt?: string;
    recommendationScore?: number;
    applicationStatus?: ApplicationStatusEnum;
    availabilityNotes?: string;
    coverLetter?: string;
    portfolio?: Array<string>;
    craftsperson?: {
        name?: string;
        selfProclaimedTitle?: string;
        avatarUrl?: string;
        lastSeenMinutesAgo?: number;
    };
};
export type WorkPostingsDetailsResponse = {
    workId?: string;
    title?: string;
    createdAt?: string;
    workType?: WorkTypeEnum;
    status?: WorkStatusEnum;
    hired?: number;
    rejected?: number;
    shortlisted?: number;
    skills?: Skills;
    applicants?: Array<Applicant>;
};
export type ContractActiveClient = BaseClientContractActiveAndPosting & {
    contractId?: string;
};
export type BaseClientContractActiveAndPosting = BasePayment & {
    contractId?: string;
    contractStatus?: ContractStatusEnum;
    role?: string;
    startDate?: string;
    createdAt?: string;
    terminatedAt?: string;
    terminatedBy?: TerminatedByEnum;
    /**
     * in months
     */
    duration?: number;
    craftsperson?: {
        craftspersonId?: string;
        name?: string;
        avatarUrl?: string;
        lastSeenMinutesAgo?: number;
    };
    founder?: {
        bonus?: string;
        shares?: number;
        fiatRate?: string;
        republicRate?: string;
    };
};
export type ShortlistRequest = {
    workId: string;
    /**
     * CrowdCraft ID for the user
     */
    ccId: string;
};
export type ShortlistResponse = {
    shortlistId?: string;
};
export type RetrieveAllShortlistResponse = {
    shortlistedList?: Array<{
        ccId?: string;
    }>;
};
export type MetricsSummaryResponse = {
    activeContracts?: number;
    pendingContractApproval?: number;
    craftsperson?: {
        totalAppliedWork?: number;
    };
    client?: {
        activeJobPostings?: number;
        totalDrafts?: number;
        totalHired?: number;
        totalApplicationsRejected?: number;
        totalWork?: number;
        gigs?: number;
        tasks?: number;
        tournament?: number;
    };
};
export type ErrorResponse = {
    code?: string;
    message?: string;
};
export type GetWorkMetadataRetrieveResponse = MetadataResponse;
export type PutWorkUpdateData = {
    requestBody: CreateWorkRequest;
};
export type PutWorkUpdateResponse = CreateWorkResponse;
export type GetWorkDetailsByWorkIdData = {
    /**
     * Work ID
     */
    workId: string;
};
export type GetWorkDetailsByWorkIdResponse = WorkDetailsResponse;
export type PostWorkDetailsListData = {
    requestBody: RetrieveMultipleWorkDetailsRequest;
};
export type PostWorkDetailsListResponse = RetrieveMultipleWorkDetailsResponse;
export type PostWorkRetrieveFilteredListData = {
    requestBody: FilteredWorkListRequest;
};
export type PostWorkRetrieveFilteredListResponse = FilteredWorkListResponse;
export type PostWorkPostingCloseByWorkIdData = {
    /**
     * Work ID
     */
    workId: string;
};
export type PostWorkPostingCloseByWorkIdResponse = unknown;
export type GetWorkPostingRetrieveResponse = WorkPostingsClient;
export type GetWorkPostingByWorkIdDetailData = {
    /**
     * Work ID
     */
    workId: string;
};
export type GetWorkPostingByWorkIdDetailResponse = WorkPostingsDetailsResponse;
export type PostWorkCraftspersonApplyData = {
    requestBody: ApplyWorkRequest;
};
export type PostWorkCraftspersonApplyResponse = ApplyWorkResponse;
export type PostWorkCraftspersonApplicationWithdrawByApplicationIdData = {
    applicationId: string;
};
export type PostWorkCraftspersonApplicationWithdrawByApplicationIdResponse = unknown;
export type PostWorkCraftspersonWorkApprovalData = {
    requestBody: WorkApprovalRequest;
};
export type PostWorkCraftspersonWorkApprovalResponse = WorkApprovalResponse;
export type GetWorkCraftspersonApplicationsRetrieveResponse = CraftspersonApplicationOverview;
export type PostWorkClientApplicationApprovalData = {
    requestBody: ApplicationApprovalRequest;
};
export type PostWorkClientApplicationApprovalResponse = unknown;
export type PostWorkClientShortlistData = {
    requestBody: ShortlistRequest;
};
export type PostWorkClientShortlistResponse = ShortlistResponse;
export type PostWorkClientRemoveShortlistData = {
    requestBody: ShortlistRequest;
};
export type PostWorkClientRemoveShortlistResponse = unknown;
export type GetWorkClientShortlistByWorkIdRetrieveData = {
    /**
     * Work ID
     */
    workId: string;
};
export type GetWorkClientShortlistByWorkIdRetrieveResponse = RetrieveAllShortlistResponse;
export type GetWorkContractCraftspersonRetrieveResponse = CraftspersonActiveContractsResponse;
export type GetWorkContractClientRetrieveResponse = ClientActiveContractsResponse;
export type PostWorkContractClientTerminateData = {
    requestBody: ContractClientTerminateRequest;
};
export type PostWorkContractClientTerminateResponse = unknown;
export type PostWorkContractCraftspersonTerminateData = {
    requestBody: ContractCraftspersonTerminateRequest;
};
export type PostWorkContractCraftspersonTerminateResponse = unknown;
export type GetWorkMetricsSummaryResponse = MetricsSummaryResponse;
export type $OpenApiTs = {
    '/work/metadata/retrieve': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: MetadataResponse;
            };
        };
    };
    '/work/update': {
        put: {
            req: PutWorkUpdateData;
            res: {
                /**
                 * Success
                 */
                200: CreateWorkResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/details/{workId}': {
        get: {
            req: GetWorkDetailsByWorkIdData;
            res: {
                /**
                 * Success
                 */
                200: WorkDetailsResponse;
            };
        };
    };
    '/work/details-list': {
        post: {
            req: PostWorkDetailsListData;
            res: {
                /**
                 * Success
                 */
                200: RetrieveMultipleWorkDetailsResponse;
            };
        };
    };
    '/work/retrieve-filtered-list': {
        post: {
            req: PostWorkRetrieveFilteredListData;
            res: {
                /**
                 * Success
                 */
                200: FilteredWorkListResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/posting/close/{workId}': {
        post: {
            req: PostWorkPostingCloseByWorkIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/posting/retrieve': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: WorkPostingsClient;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/posting/{workId}/detail': {
        get: {
            req: GetWorkPostingByWorkIdDetailData;
            res: {
                /**
                 * Success
                 */
                200: WorkPostingsDetailsResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/craftsperson/apply': {
        post: {
            req: PostWorkCraftspersonApplyData;
            res: {
                /**
                 * Success
                 */
                200: ApplyWorkResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/craftsperson/application-withdraw/{applicationId}': {
        post: {
            req: PostWorkCraftspersonApplicationWithdrawByApplicationIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/craftsperson/work-approval': {
        post: {
            req: PostWorkCraftspersonWorkApprovalData;
            res: {
                /**
                 * Success
                 */
                200: WorkApprovalResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/craftsperson/applications/retrieve': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: CraftspersonApplicationOverview;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/client/application-approval': {
        post: {
            req: PostWorkClientApplicationApprovalData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/client/shortlist': {
        post: {
            req: PostWorkClientShortlistData;
            res: {
                /**
                 * Success
                 */
                200: ShortlistResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/client/remove-shortlist': {
        post: {
            req: PostWorkClientRemoveShortlistData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/client/shortlist/{workId}/retrieve': {
        get: {
            req: GetWorkClientShortlistByWorkIdRetrieveData;
            res: {
                /**
                 * Success
                 */
                200: RetrieveAllShortlistResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/contract/craftsperson/retrieve': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: CraftspersonActiveContractsResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/contract/client/retrieve': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: ClientActiveContractsResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/contract/client/terminate': {
        post: {
            req: PostWorkContractClientTerminateData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/contract/craftsperson/terminate': {
        post: {
            req: PostWorkContractCraftspersonTerminateData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/work/metrics/summary': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: MetricsSummaryResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
};
//# sourceMappingURL=types.gen.d.ts.map