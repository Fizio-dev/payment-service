export type MappedEvent = 'WORK_CLIENT_CONTRACT_ACCEPTED' | 'WORK_CLIENT_CONTRACT_ENDED' | 'WORK_CLIENT_JOB_POSTING_APPLICATION' | 'WORK_CRAFTSPERSON_APPLICATION_ACCEPTED' | 'WORK_CRAFTSPERSON_CONTRACT_ENDED';
export type AsyncNotificationRequest = {
    /**
     * Originator of the notification
     */
    originator: string;
    /**
     * unique id of the event
     */
    eventId: string;
    /**
     * Type of event
     */
    event: string;
    referenceId: string;
    /**
     * ID of the notification template, only required if email is not being triggered for known events
     */
    templateId?: string | null;
    data: Array<NotificationData>;
};
export type NotificationRequest = {
    /**
     * Originator of the notification
     */
    originator: string;
    /**
     * unique id of the event
     */
    eventId: string;
    /**
     * Type of event
     */
    event: string;
    /**
     * ID of the notification template
     */
    templateId: string;
    data: Array<NotificationData>;
};
export type NotificationData = EmailNotificationData;
export type EmailNotificationData = CommonNotificationData & {
    from?: string;
    /**
     * Recipient email address
     */
    to?: Array<string>;
} & {
    /**
     * Recipient email address
     */
    to: Array<string>;
};
export type CommonNotificationData = {
    /**
     * Sender of the notification
     */
    from?: string;
    /**
     * Channel of notification (sms, email, etc.)
     */
    channel: 'email';
    /**
     * Properties to be filled into subject
     */
    subjectProps?: {
        [key: string]: string;
    };
    /**
     * Properties to be filled into body
     */
    bodyProps?: {
        [key: string]: string;
    };
};
/**
 * Channel of notification (sms, email, etc.)
 */
export type channel = 'email';
export type NotificationResponse = {
    notificationIds?: Array<string>;
};
export type ErrorResponse = {
    code?: string;
    message?: string;
};
export type SendNotificationData = {
    requestBody: NotificationRequest;
};
export type SendNotificationResponse = NotificationResponse;
export type $OpenApiTs = {
    '/notifications': {
        post: {
            req: SendNotificationData;
            res: {
                /**
                 * Notification sent successfully
                 */
                200: NotificationResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
};
//# sourceMappingURL=types.gen.d.ts.map