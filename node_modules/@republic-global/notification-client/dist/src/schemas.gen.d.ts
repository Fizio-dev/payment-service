export declare const $MappedEvent: {
    readonly type: "string";
    readonly enum: readonly ["WORK_CLIENT_CONTRACT_ACCEPTED", "WORK_CLIENT_CONTRACT_ENDED", "WORK_CLIENT_JOB_POSTING_APPLICATION", "WORK_CRAFTSPERSON_APPLICATION_ACCEPTED", "WORK_CRAFTSPERSON_CONTRACT_ENDED"];
};
export declare const $AsyncNotificationRequest: {
    readonly type: "object";
    readonly required: readonly ["originator", "eventId", "event", "data", "referenceId"];
    readonly properties: {
        readonly originator: {
            readonly type: "string";
            readonly description: "Originator of the notification";
            readonly example: "user-service";
        };
        readonly eventId: {
            readonly type: "string";
            readonly description: "unique id of the event";
            readonly example: "d028b39d-8c9e-4c94-8923-067be7a7f0f3";
        };
        readonly event: {
            readonly type: "string";
            readonly description: "Type of event";
            readonly example: "registration_success";
        };
        readonly referenceId: {
            readonly type: "string";
            readonly format: "uuid";
        };
        readonly templateId: {
            readonly type: "string";
            readonly description: "ID of the notification template, only required if email is not being triggered for known events";
            readonly example: "registration-success-email";
            readonly nullable: true;
        };
        readonly data: {
            readonly type: "array";
            readonly minItems: 1;
            readonly items: {
                readonly $ref: "#/components/schemas/NotificationData";
            };
        };
    };
};
export declare const $NotificationRequest: {
    readonly type: "object";
    readonly required: readonly ["originator", "eventId", "event", "data", "templateId"];
    readonly properties: {
        readonly originator: {
            readonly type: "string";
            readonly description: "Originator of the notification";
            readonly example: "user-service";
        };
        readonly eventId: {
            readonly type: "string";
            readonly description: "unique id of the event";
            readonly example: "d028b39d-8c9e-4c94-8923-067be7a7f0f3";
        };
        readonly event: {
            readonly type: "string";
            readonly description: "Type of event";
            readonly example: "registration_success";
        };
        readonly templateId: {
            readonly type: "string";
            readonly description: "ID of the notification template";
            readonly example: "registration-success-email";
        };
        readonly data: {
            readonly type: "array";
            readonly minItems: 1;
            readonly items: {
                readonly $ref: "#/components/schemas/NotificationData";
            };
        };
    };
};
export declare const $NotificationData: {
    readonly oneOf: readonly [{
        readonly $ref: "#/components/schemas/EmailNotificationData";
    }];
    readonly discriminator: {
        readonly propertyName: "channel";
        readonly mapping: {
            readonly email: "#/components/schemas/EmailNotificationData";
        };
    };
};
export declare const $EmailNotificationData: {
    readonly required: readonly ["to"];
    readonly allOf: readonly [{
        readonly $ref: "#/components/schemas/CommonNotificationData";
    }, {
        readonly type: "object";
        readonly properties: {
            readonly from: {
                readonly type: "string";
                readonly format: "email";
            };
            readonly to: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly format: "email";
                };
                readonly description: "Recipient email address";
            };
        };
    }];
};
export declare const $CommonNotificationData: {
    readonly type: "object";
    readonly required: readonly ["channel"];
    readonly properties: {
        readonly from: {
            readonly type: "string";
            readonly description: "Sender of the notification";
        };
        readonly channel: {
            readonly type: "string";
            readonly description: "Channel of notification (sms, email, etc.)";
            readonly default: "email";
            readonly enum: readonly ["email"];
        };
        readonly subjectProps: {
            readonly type: "object";
            readonly description: "Properties to be filled into subject";
            readonly additionalProperties: {
                readonly type: "string";
            };
            readonly example: {
                readonly foo: "bar";
                readonly baz: "qux";
            };
        };
        readonly bodyProps: {
            readonly type: "object";
            readonly description: "Properties to be filled into body";
            readonly additionalProperties: {
                readonly type: "string";
            };
            readonly example: {
                readonly foo: "bar";
                readonly bar: "2024-04-24";
            };
        };
    };
};
export declare const $NotificationResponse: {
    readonly properties: {
        readonly notificationIds: {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
                readonly format: "uuid";
            };
        };
    };
};
export declare const $ErrorResponse: {
    readonly type: "object";
    readonly properties: {
        readonly code: {
            readonly type: "string";
            readonly example: "NOTERR001";
        };
        readonly message: {
            readonly type: "string";
            readonly example: "Channel push unsupported, supported channels: email";
        };
    };
};
//# sourceMappingURL=schemas.gen.d.ts.map