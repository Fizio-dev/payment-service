{"version":3,"file":"schemas.gen.js","sourceRoot":"","sources":["../../src/schemas.gen.ts"],"names":[],"mappings":"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","sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\n\nexport const $MappedEvent = {\n    type: 'string',\n    enum: [\n        'WORK_CLIENT_CONTRACT_ACCEPTED',\n        'WORK_CLIENT_CONTRACT_ENDED',\n        'WORK_CLIENT_JOB_POSTING_APPLICATION',\n        'WORK_CRAFTSPERSON_APPLICATION_ACCEPTED',\n        'WORK_CRAFTSPERSON_CONTRACT_ENDED',\n    ],\n} as const;\n\nexport const $AsyncNotificationRequest = {\n    type: 'object',\n    required: ['originator', 'eventId', 'event', 'data', 'referenceId'],\n    properties: {\n        originator: {\n            type: 'string',\n            description: 'Originator of the notification',\n            example: 'user-service',\n        },\n        eventId: {\n            type: 'string',\n            description: 'unique id of the event',\n            example: 'd028b39d-8c9e-4c94-8923-067be7a7f0f3',\n        },\n        event: {\n            type: 'string',\n            description: 'Type of event',\n            example: 'registration_success',\n        },\n        referenceId: {\n            type: 'string',\n            format: 'uuid',\n        },\n        templateId: {\n            type: 'string',\n            description:\n                'ID of the notification template, only required if email is not being triggered for known events',\n            example: 'registration-success-email',\n            nullable: true,\n        },\n        data: {\n            type: 'array',\n            minItems: 1,\n            items: {\n                $ref: '#/components/schemas/NotificationData',\n            },\n        },\n    },\n} as const;\n\nexport const $NotificationRequest = {\n    type: 'object',\n    required: ['originator', 'eventId', 'event', 'data', 'templateId'],\n    properties: {\n        originator: {\n            type: 'string',\n            description: 'Originator of the notification',\n            example: 'user-service',\n        },\n        eventId: {\n            type: 'string',\n            description: 'unique id of the event',\n            example: 'd028b39d-8c9e-4c94-8923-067be7a7f0f3',\n        },\n        event: {\n            type: 'string',\n            description: 'Type of event',\n            example: 'registration_success',\n        },\n        templateId: {\n            type: 'string',\n            description: 'ID of the notification template',\n            example: 'registration-success-email',\n        },\n        data: {\n            type: 'array',\n            minItems: 1,\n            items: {\n                $ref: '#/components/schemas/NotificationData',\n            },\n        },\n    },\n} as const;\n\nexport const $NotificationData = {\n    oneOf: [\n        {\n            $ref: '#/components/schemas/EmailNotificationData',\n        },\n    ],\n    discriminator: {\n        propertyName: 'channel',\n        mapping: {\n            email: '#/components/schemas/EmailNotificationData',\n        },\n    },\n} as const;\n\nexport const $EmailNotificationData = {\n    required: ['to'],\n    allOf: [\n        {\n            $ref: '#/components/schemas/CommonNotificationData',\n        },\n        {\n            type: 'object',\n            properties: {\n                from: {\n                    type: 'string',\n                    format: 'email',\n                },\n                to: {\n                    type: 'array',\n                    items: {\n                        type: 'string',\n                        format: 'email',\n                    },\n                    description: 'Recipient email address',\n                },\n            },\n        },\n    ],\n} as const;\n\nexport const $CommonNotificationData = {\n    type: 'object',\n    required: ['channel'],\n    properties: {\n        from: {\n            type: 'string',\n            description: 'Sender of the notification',\n        },\n        channel: {\n            type: 'string',\n            description: 'Channel of notification (sms, email, etc.)',\n            default: 'email',\n            enum: ['email'],\n        },\n        subjectProps: {\n            type: 'object',\n            description: 'Properties to be filled into subject',\n            additionalProperties: {\n                type: 'string',\n            },\n            example: {\n                foo: 'bar',\n                baz: 'qux',\n            },\n        },\n        bodyProps: {\n            type: 'object',\n            description: 'Properties to be filled into body',\n            additionalProperties: {\n                type: 'string',\n            },\n            example: {\n                foo: 'bar',\n                bar: '2024-04-24',\n            },\n        },\n    },\n} as const;\n\nexport const $NotificationResponse = {\n    properties: {\n        notificationIds: {\n            type: 'array',\n            items: {\n                type: 'string',\n                format: 'uuid',\n            },\n        },\n    },\n} as const;\n\nexport const $ErrorResponse = {\n    type: 'object',\n    properties: {\n        code: {\n            type: 'string',\n            example: 'NOTERR001',\n        },\n        message: {\n            type: 'string',\n            example: 'Channel push unsupported, supported channels: email',\n        },\n    },\n} as const;\n"]}