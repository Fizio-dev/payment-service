// This file is auto-generated by @hey-api/openapi-ts
export const $MappedEvent = {
    type: 'string',
    enum: [
        'WORK_CLIENT_CONTRACT_ACCEPTED',
        'WORK_CLIENT_CONTRACT_ENDED',
        'WORK_CLIENT_JOB_POSTING_APPLICATION',
        'WORK_CRAFTSPERSON_APPLICATION_ACCEPTED',
        'WORK_CRAFTSPERSON_CONTRACT_ENDED',
    ],
};
export const $AsyncNotificationRequest = {
    type: 'object',
    required: ['originator', 'eventId', 'event', 'data', 'referenceId'],
    properties: {
        originator: {
            type: 'string',
            description: 'Originator of the notification',
            example: 'user-service',
        },
        eventId: {
            type: 'string',
            description: 'unique id of the event',
            example: 'd028b39d-8c9e-4c94-8923-067be7a7f0f3',
        },
        event: {
            type: 'string',
            description: 'Type of event',
            example: 'registration_success',
        },
        referenceId: {
            type: 'string',
            format: 'uuid',
        },
        templateId: {
            type: 'string',
            description: 'ID of the notification template, only required if email is not being triggered for known events',
            example: 'registration-success-email',
            nullable: true,
        },
        data: {
            type: 'array',
            minItems: 1,
            items: {
                $ref: '#/components/schemas/NotificationData',
            },
        },
    },
};
export const $NotificationRequest = {
    type: 'object',
    required: ['originator', 'eventId', 'event', 'data', 'templateId'],
    properties: {
        originator: {
            type: 'string',
            description: 'Originator of the notification',
            example: 'user-service',
        },
        eventId: {
            type: 'string',
            description: 'unique id of the event',
            example: 'd028b39d-8c9e-4c94-8923-067be7a7f0f3',
        },
        event: {
            type: 'string',
            description: 'Type of event',
            example: 'registration_success',
        },
        templateId: {
            type: 'string',
            description: 'ID of the notification template',
            example: 'registration-success-email',
        },
        data: {
            type: 'array',
            minItems: 1,
            items: {
                $ref: '#/components/schemas/NotificationData',
            },
        },
    },
};
export const $NotificationData = {
    oneOf: [
        {
            $ref: '#/components/schemas/EmailNotificationData',
        },
    ],
    discriminator: {
        propertyName: 'channel',
        mapping: {
            email: '#/components/schemas/EmailNotificationData',
        },
    },
};
export const $EmailNotificationData = {
    required: ['to'],
    allOf: [
        {
            $ref: '#/components/schemas/CommonNotificationData',
        },
        {
            type: 'object',
            properties: {
                from: {
                    type: 'string',
                    format: 'email',
                },
                to: {
                    type: 'array',
                    items: {
                        type: 'string',
                        format: 'email',
                    },
                    description: 'Recipient email address',
                },
            },
        },
    ],
};
export const $CommonNotificationData = {
    type: 'object',
    required: ['channel'],
    properties: {
        from: {
            type: 'string',
            description: 'Sender of the notification',
        },
        channel: {
            type: 'string',
            description: 'Channel of notification (sms, email, etc.)',
            default: 'email',
            enum: ['email'],
        },
        subjectProps: {
            type: 'object',
            description: 'Properties to be filled into subject',
            additionalProperties: {
                type: 'string',
            },
            example: {
                foo: 'bar',
                baz: 'qux',
            },
        },
        bodyProps: {
            type: 'object',
            description: 'Properties to be filled into body',
            additionalProperties: {
                type: 'string',
            },
            example: {
                foo: 'bar',
                bar: '2024-04-24',
            },
        },
    },
};
export const $NotificationResponse = {
    properties: {
        notificationIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid',
            },
        },
    },
};
export const $ErrorResponse = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            example: 'NOTERR001',
        },
        message: {
            type: 'string',
            example: 'Channel push unsupported, supported channels: email',
        },
    },
};
//# sourceMappingURL=schemas.gen.js.map