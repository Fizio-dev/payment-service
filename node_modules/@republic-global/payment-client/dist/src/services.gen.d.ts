import type { CancelablePromise } from './core/CancelablePromise.js';
import type { AllResponse, ApprovePaymentData, ApprovePaymentResponse, CancelPaymentData, CancelPaymentResponse, CreatePaymentAccountData, CreatePaymentAccountResponse2, CreatePaymentData, CreatePaymentResponse, GetPaymentAccountData, GetPaymentAccountResponse, GetPaymentStatsResponse, GetReferencePaymentsData, GetReferencePaymentsResponse, GetUserPaymentStatsData, GetUserPaymentStatsResponse, GetUserPaymentsData, GetUserPaymentsResponse, UpdatePaymentData, UpdatePaymentResponse } from './types.gen.js';
/**
 * List payments by reference ids
 * references are set by external services. for example 'contract-{id}'
 * @param data The data for the request.
 * @param data.referenceIds
 * @returns PaymentDetails OK
 * @throws ApiError
 */
export declare const getReferencePayments: (data: GetReferencePaymentsData) => CancelablePromise<GetReferencePaymentsResponse>;
/**
 * Create new payment
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Payment OK
 * @throws ApiError
 */
export declare const createPayment: (data: CreatePaymentData) => CancelablePromise<CreatePaymentResponse>;
/**
 * Update existing payment
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Payment OK
 * @throws ApiError
 */
export declare const updatePayment: (data: UpdatePaymentData) => CancelablePromise<UpdatePaymentResponse>;
/**
 * Cancel a payment
 * @param data The data for the request.
 * @param data.id
 * @returns Payment OK
 * @throws ApiError
 */
export declare const cancelPayment: (data: CancelPaymentData) => CancelablePromise<CancelPaymentResponse>;
/**
 * Approve a payment
 * @param data The data for the request.
 * @param data.id
 * @returns Payment OK
 * @throws ApiError
 */
export declare const approvePayment: (data: ApprovePaymentData) => CancelablePromise<ApprovePaymentResponse>;
/**
 * Get users connected payment account
 * Success -> account connected. Failure -> account not connected
 * @param data The data for the request.
 * @param data.userId
 * @returns PaymentAccount OK
 * @throws ApiError
 */
export declare const getPaymentAccount: (data: GetPaymentAccountData) => CancelablePromise<GetPaymentAccountResponse>;
/**
 * Get the url for payment account onboarding. Redirect the user to this url immediately, don't share it anywhere else
 * Success -> do the redirect. Failure -> something is wrong, contact support
 * @param data The data for the request.
 * @param data.userId
 * @returns CreatePaymentAccountResponse OK
 * @throws ApiError
 */
export declare const createPaymentAccount: (data: CreatePaymentAccountData) => CancelablePromise<CreatePaymentAccountResponse2>;
/**
 * List user payments
 * @param data The data for the request.
 * @param data.userId
 * @param data.page
 * @param data.perPage
 * @returns PaymentDetails OK
 * @throws ApiError
 */
export declare const getUserPayments: (data: GetUserPaymentsData) => CancelablePromise<GetUserPaymentsResponse>;
/**
 * Fetch user payment stats
 * @param data The data for the request.
 * @param data.userId
 * @returns PaymentStats OK
 * @throws ApiError
 */
export declare const getUserPaymentStats: (data: GetUserPaymentStatsData) => CancelablePromise<GetUserPaymentStatsResponse>;
/**
 * Fetch payment stats
 * @returns ClientPaymentStats OK
 * @throws ApiError
 */
export declare const getPaymentStats: () => CancelablePromise<GetPaymentStatsResponse>;
/**
 * @returns string OK
 * @throws ApiError
 */
export declare const all: () => CancelablePromise<AllResponse>;
//# sourceMappingURL=services.gen.d.ts.map