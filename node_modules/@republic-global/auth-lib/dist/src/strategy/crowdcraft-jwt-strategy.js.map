{"version":3,"file":"crowdcraft-jwt-strategy.js","sourceRoot":"","sources":["../../../src/strategy/crowdcraft-jwt-strategy.ts"],"names":[],"mappings":"AACA,OAAO,OAAO,MAAM,UAAU,CAAC;AAC/B,OAAO,OAAO,MAAM,cAAc,CAAC;AACnC,OAAO,EACH,UAAU,EACV,QAAQ,IAAI,WAAW,GAG1B,MAAM,cAAc,CAAC;AAEtB,MAAM,IAAI,GAA+B;IACrC,cAAc,EAAE,UAAU,CAAC,2BAA2B,EAAE;IACxD,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAE;IAC9B,mBAAmB,EAAE,OAAO,CAAC,iBAAiB,CAAC;QAC3C,KAAK,EAAE,IAAI;QACX,SAAS,EAAE,IAAI;QACf,qBAAqB,EAAE,CAAC;QACxB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAE;KACpC,CAAC;IACF,iBAAiB,EAAE,IAAI;CAC1B,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,UACvD,GAAY,EACZ,WAAW,EACX,IAAsB;IAEtB,MAAM,IAAI,GAAS;QACf,EAAE,EAAE,WAAW,CAAC,GAAG;QACnB,QAAQ,EAAE,WAAW,CAAC,kBAAkB;QACxC,QAAQ,EAAE,WAAW,CAAC,kBAAkB;QACxC,SAAS,EAAE,WAAW,CAAC,UAAU;QACjC,QAAQ,EAAE,WAAW,CAAC,WAAW;QACjC,OAAO,EAAE,WAAW,CAAC,OAAO;QAC5B,kBAAkB,EAAE,WAAW,CAAC,4BAA4B;QAC5D,gBAAgB,EAAE,KAAK;KAC1B,CAAC;IACF,IAAI,CAAC,CAAC,oBAAoB,IAAI,WAAW,CAAC,EAAE,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,GAAG,CAAC;IAC5C,CAAC;IAED,MAAM,QAAQ,GAAa;QACvB,KAAK,EAAE,UAAU,CAAC,2BAA2B,EAAE,CAAC,GAAG,CAAE;KACxD,CAAC;IACF,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC","sourcesContent":["import type { AuthInfo, Request, User } from 'express';\nimport jwksRsa from 'jwks-rsa';\nimport process from 'node:process';\nimport {\n    ExtractJwt,\n    Strategy as JwtStrategy,\n    type StrategyOptionsWithRequest,\n    type VerifiedCallback,\n} from 'passport-jwt';\n\nconst opts: StrategyOptionsWithRequest = {\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    issuer: process.env['ISSUER']!,\n    secretOrKeyProvider: jwksRsa.passportJwtSecret({\n        cache: true,\n        rateLimit: true,\n        jwksRequestsPerMinute: 5,\n        jwksUri: process.env['JWKS_URI']!,\n    }),\n    passReqToCallback: true,\n};\n\nexport const crowdCraftJwtStrategy = new JwtStrategy(opts, function (\n    req: Request,\n    jwt_payload,\n    done: VerifiedCallback\n) {\n    const user: User = {\n        id: jwt_payload.sub,\n        username: jwt_payload.extension_Username,\n        userType: jwt_payload.extension_UserType,\n        firstName: jwt_payload.given_name,\n        lastName: jwt_payload.family_name,\n        country: jwt_payload.country,\n        registrationStatus: jwt_payload.extension_RegistrationStatus,\n        isServiceAccount: false,\n    };\n    if (!('extension_Username' in jwt_payload)) {\n        user.isServiceAccount = true;\n        user.serviceAccountId = jwt_payload.azp;\n    }\n\n    const authInfo: AuthInfo = {\n        token: ExtractJwt.fromAuthHeaderAsBearerToken()(req)!,\n    };\n    return done(null, user, authInfo);\n});\n"]}