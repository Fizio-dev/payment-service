const globalOpts = {};
let configured = false;
export const configAuthLib = (opt) => {
    globalOpts.clientId = opt.clientId;
    globalOpts.clientSecret = opt.clientSecret;
    globalOpts.scope = opt.scope;
    globalOpts.url = opt.url;
    configured = true;
};
const tokenCache = {};
export const getServiceAccountToken = async (optsOverride) => {
    if (!configured && !optsOverride) {
        throw new Error('auth-lib needs to be configured');
    }
    const options = optsOverride ?? globalOpts;
    const url = options.url;
    const clientId = options.clientId;
    const clientSecret = options.clientSecret;
    const scope = options.scope;
    const cacheKey = url + ';' + clientId + ';' + clientSecret + ';' + scope;
    if (cacheKey in tokenCache &&
        tokenCache[cacheKey].expiresAt > new Date().getTime() - 60000) {
        return tokenCache[cacheKey].token;
    }
    const opts = {
        method: 'POST',
        headers: { 'content-type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({
            grant_type: 'client_credentials',
            client_id: clientId,
            client_secret: clientSecret,
            scope: scope,
        }),
    };
    const response = await fetch(url, opts);
    if (!response.ok) {
        const error = await response.text();
        throw new Error(`Status: ${response.status}, Error: ${error}`);
    }
    const responseData = (await response.json());
    tokenCache[cacheKey] = {
        token: responseData.access_token,
        expiresAt: responseData.expires_on * 1000,
    };
    return responseData.access_token;
};
//# sourceMappingURL=service-account-token.js.map