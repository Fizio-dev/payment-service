{"version":3,"file":"service-account-token.js","sourceRoot":"","sources":["../../../src/util/service-account-token.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,GAAG,EAAgC,CAAC;AAEpD,IAAI,UAAU,GAAY,KAAK,CAAC;AAChC,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAA+B,EAAE,EAAE;IAC7D,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;IACnC,UAAU,CAAC,YAAY,GAAG,GAAG,CAAC,YAAY,CAAC;IAC3C,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;IAC7B,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IACzB,UAAU,GAAG,IAAI,CAAC;AACtB,CAAC,CAAC;AAMF,MAAM,UAAU,GAAoC,EAAE,CAAC;AAcvD,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EACvC,YAAyC,EAC3C,EAAE;IACA,IAAI,CAAC,UAAU,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACvD,CAAC;IAED,MAAM,OAAO,GAAG,YAAY,IAAI,UAAU,CAAC;IAC3C,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IACxB,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IAClC,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAC1C,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAE5B,MAAM,QAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,YAAY,GAAG,GAAG,GAAG,KAAK,CAAC;IACzE,IACI,QAAQ,IAAI,UAAU;QACtB,UAAU,CAAC,QAAQ,CAAE,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,KAAK,EAChE,CAAC;QACC,OAAO,UAAU,CAAC,QAAQ,CAAE,CAAC,KAAK,CAAC;IACvC,CAAC;IAED,MAAM,IAAI,GAAG;QACT,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,EAAE,cAAc,EAAE,mCAAmC,EAAE;QAChE,IAAI,EAAE,IAAI,eAAe,CAAC;YACtB,UAAU,EAAE,oBAAoB;YAChC,SAAS,EAAE,QAAQ;YACnB,aAAa,EAAE,YAAY;YAC3B,KAAK,EAAE,KAAK;SACf,CAAC;KACL,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACxC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACf,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,WAAW,QAAQ,CAAC,MAAM,YAAY,KAAK,EAAE,CAAC,CAAC;IACnE,CAAC;IAED,MAAM,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAkB,CAAC;IAC9D,UAAU,CAAC,QAAQ,CAAC,GAAG;QACnB,KAAK,EAAE,YAAY,CAAC,YAAY;QAChC,SAAS,EAAE,YAAY,CAAC,UAAU,GAAG,IAAI;KAC5C,CAAC;IACF,OAAO,YAAY,CAAC,YAAY,CAAC;AACrC,CAAC,CAAC","sourcesContent":["const globalOpts = {} as ServiceAccountTokenOptions;\n\nlet configured: boolean = false;\nexport const configAuthLib = (opt: ServiceAccountTokenOptions) => {\n    globalOpts.clientId = opt.clientId;\n    globalOpts.clientSecret = opt.clientSecret;\n    globalOpts.scope = opt.scope;\n    globalOpts.url = opt.url;\n    configured = true;\n};\n\ninterface TokenCacheEntry {\n    expiresAt: number;\n    token: string;\n}\nconst tokenCache: Record<string, TokenCacheEntry> = {};\n\ninterface ServiceAccountTokenOptions {\n    url: string;\n    clientId: string;\n    clientSecret: string;\n    scope: string;\n}\n\ninterface TokenResponse {\n    access_token: string;\n    expires_on: number;\n}\n\nexport const getServiceAccountToken = async (\n    optsOverride?: ServiceAccountTokenOptions\n) => {\n    if (!configured && !optsOverride) {\n        throw new Error('auth-lib needs to be configured');\n    }\n\n    const options = optsOverride ?? globalOpts;\n    const url = options.url;\n    const clientId = options.clientId;\n    const clientSecret = options.clientSecret;\n    const scope = options.scope;\n\n    const cacheKey = url + ';' + clientId + ';' + clientSecret + ';' + scope;\n    if (\n        cacheKey in tokenCache &&\n        tokenCache[cacheKey]!.expiresAt > new Date().getTime() - 60000\n    ) {\n        return tokenCache[cacheKey]!.token;\n    }\n\n    const opts = {\n        method: 'POST',\n        headers: { 'content-type': 'application/x-www-form-urlencoded' },\n        body: new URLSearchParams({\n            grant_type: 'client_credentials',\n            client_id: clientId,\n            client_secret: clientSecret,\n            scope: scope,\n        }),\n    };\n\n    const response = await fetch(url, opts);\n    if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Status: ${response.status}, Error: ${error}`);\n    }\n\n    const responseData = (await response.json()) as TokenResponse;\n    tokenCache[cacheKey] = {\n        token: responseData.access_token,\n        expiresAt: responseData.expires_on * 1000,\n    };\n    return responseData.access_token;\n};\n"]}