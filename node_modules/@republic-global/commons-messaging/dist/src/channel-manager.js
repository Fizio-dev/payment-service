import { LoggerFactory, uniformDistributionRandom, } from '@republic-global/commons';
import { requireInitialization, validateAlreadyInitialized } from './util.js';
export class ChannelManager {
    connection;
    opts;
    channelType;
    logger = LoggerFactory.getLogger('ChannelManager');
    channels = [];
    initialized = false;
    constructor(connection, opts, channelType) {
        this.connection = connection;
        this.opts = opts;
        this.channelType = channelType;
    }
    async initialize() {
        validateAlreadyInitialized(this.initialized);
        for (let index = 0; index < this.opts.maxChannelCount; ++index) {
            const channel = this.connection.createChannel({
                confirm: this.opts.confirm,
            });
            await channel.waitForConnect();
            this.channels.push(channel);
            channel.once('error', (error) => {
                this.logger.error(`[${this.channelType} channel] error: ${error}`);
            });
            channel.once('close', async () => {
                this.logger.warn(`[${this.channelType} channel] ${index} closed`);
            });
        }
        this.initialized = true;
    }
    pickChannel() {
        requireInitialization(this.initialized);
        const channelIndex = uniformDistributionRandom(this.opts.maxChannelCount);
        return this.channels[channelIndex];
    }
    async close() {
        await Promise.all(this.channels.map(async (channel, index) => {
            this.logger.debug(`Disposing channel ${index}`);
            await channel.close();
        }));
    }
}
//# sourceMappingURL=channel-manager.js.map