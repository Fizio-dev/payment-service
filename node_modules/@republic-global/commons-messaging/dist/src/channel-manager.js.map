{"version":3,"file":"channel-manager.js","sourceRoot":"","sources":["../../src/channel-manager.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,aAAa,EACb,yBAAyB,GAC5B,MAAM,0BAA0B,CAAC;AAOlC,OAAO,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,MAAM,WAAW,CAAC;AAI9E,MAAM,OAAO,cAAc;IAMF;IACA;IACA;IAPJ,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IACnD,QAAQ,GAAqB,EAAE,CAAC;IACzC,WAAW,GAAG,KAAK,CAAC;IAE5B,YACqB,UAAiC,EACjC,IAAiB,EACjB,WAAwB;QAFxB,eAAU,GAAV,UAAU,CAAuB;QACjC,SAAI,GAAJ,IAAI,CAAa;QACjB,gBAAW,GAAX,WAAW,CAAa;IAC1C,CAAC;IAEG,KAAK,CAAC,UAAU;QACnB,0BAA0B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,KAAK,EAAE,CAAC;YAC7D,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;gBAC1C,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO;aAC7B,CAAC,CAAC;YACH,MAAM,OAAO,CAAC,cAAc,EAAE,CAAC;YAC/B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAE5B,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,IAAI,IAAI,CAAC,WAAW,oBAAoB,KAAK,EAAE,CAClD,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;gBAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,IAAI,IAAI,CAAC,WAAW,aAAa,KAAK,SAAS,CAClD,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IAEM,WAAW;QACd,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,MAAM,YAAY,GAAG,yBAAyB,CAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,CAC5B,CAAC;QACF,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAE,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,KAAK;QACd,MAAM,OAAO,CAAC,GAAG,CACb,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;YACvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,KAAK,EAAE,CAAC,CAAC;YAChD,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC,CAAC,CACL,CAAC;IACN,CAAC;CACJ","sourcesContent":["import {\n    LoggerFactory,\n    uniformDistributionRandom,\n} from '@republic-global/commons';\nimport type {\n    AmqpConnectionManager,\n    ChannelWrapper,\n} from 'amqp-connection-manager';\n\nimport type { ChannelOpts } from './config.js';\nimport { requireInitialization, validateAlreadyInitialized } from './util.js';\n\nexport type ChannelType = 'publish' | 'subscribe';\n\nexport class ChannelManager {\n    private readonly logger = LoggerFactory.getLogger('ChannelManager');\n    private readonly channels: ChannelWrapper[] = [];\n    private initialized = false;\n\n    constructor(\n        private readonly connection: AmqpConnectionManager,\n        private readonly opts: ChannelOpts,\n        private readonly channelType: ChannelType\n    ) {}\n\n    public async initialize() {\n        validateAlreadyInitialized(this.initialized);\n        for (let index = 0; index < this.opts.maxChannelCount; ++index) {\n            const channel = this.connection.createChannel({\n                confirm: this.opts.confirm,\n            });\n            await channel.waitForConnect();\n            this.channels.push(channel);\n\n            channel.once('error', (error) => {\n                this.logger.error(\n                    `[${this.channelType} channel] error: ${error}`\n                );\n            });\n\n            channel.once('close', async () => {\n                this.logger.warn(\n                    `[${this.channelType} channel] ${index} closed`\n                );\n            });\n        }\n        this.initialized = true;\n    }\n\n    public pickChannel(): ChannelWrapper {\n        requireInitialization(this.initialized);\n        const channelIndex = uniformDistributionRandom(\n            this.opts.maxChannelCount\n        );\n        return this.channels[channelIndex]!;\n    }\n\n    public async close() {\n        await Promise.all(\n            this.channels.map(async (channel, index) => {\n                this.logger.debug(`Disposing channel ${index}`);\n                await channel.close();\n            })\n        );\n    }\n}\n"]}