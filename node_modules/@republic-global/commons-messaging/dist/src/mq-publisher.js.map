{"version":3,"file":"mq-publisher.js","sourceRoot":"","sources":["../../src/mq-publisher.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoggerFactory } from '@republic-global/commons';\nimport { type AmqpConnectionManager, connect } from 'amqp-connection-manager';\nimport type { Disposable } from 'tsyringe';\n\nimport { ChannelManager } from './channel-manager.js';\nimport { type MQPublisherOpts } from './config.js';\nimport { initializeTopology } from './topology.js';\nimport { requireInitialization, validateAlreadyInitialized } from './util.js';\n\nexport class MQPublisher implements Disposable {\n    private readonly logger = LoggerFactory.getLogger('MQPublisher');\n\n    private readonly connection: AmqpConnectionManager;\n    private readonly channelManager: ChannelManager;\n    private initialized = false;\n\n    constructor(private readonly opts: MQPublisherOpts) {\n        this.connection = connect(opts.connectionConfig, opts.connectionOpts);\n\n        this.connection.once('error', (error) => {\n            this.logger.error(`Publisher connection error: ${error}`);\n        });\n\n        this.connection.once('close', (error) => {\n            this.logger.error(`Publisher connection closed: ${error}`);\n        });\n\n        this.channelManager = new ChannelManager(\n            this.connection,\n            opts.channelOpts,\n            'publish'\n        );\n    }\n\n    public async initialize() {\n        validateAlreadyInitialized(this.initialized);\n        await initializeTopology(this.connection, this.opts.topology);\n        await this.channelManager.initialize();\n        this.initialized = true;\n    }\n\n    public async send(queueName: string, message: unknown) {\n        requireInitialization(this.initialized);\n        const channel = this.channelManager.pickChannel();\n        await channel.sendToQueue(queueName, JSON.stringify(message));\n    }\n\n    public async sendBatch(queueName: string, messages: unknown[]) {\n        requireInitialization(this.initialized);\n        try {\n            await Promise.all(\n                messages.map((message) => {\n                    const channel = this.channelManager.pickChannel();\n                    channel.sendToQueue(\n                        queueName,\n                        Buffer.from(JSON.stringify(message), 'utf-8')\n                    );\n                    this.logger.info(`Sent message via queue ${queueName}`);\n                })\n            );\n        } catch (error) {\n            this.logger.error(error);\n            throw error;\n        }\n    }\n\n    async dispose() {\n        this.logger.info('Disposing MQ Publisher');\n        await this.channelManager.close();\n        await this.connection.close();\n    }\n}\n"]}