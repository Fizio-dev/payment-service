{"version":3,"file":"configurer.js","sourceRoot":"","sources":["../../src/configurer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAS3D,MAAM,CAAC,MAAM,WAAW,GAAG,mBAAmB,CAAC;AAE/C,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACnC,MAAc,EACd,UAAoB,EACtB,EAAE;IACA,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;QACxC,OAAO;YACH,IAAI,EAAE,GAAG,SAAS,EAAE;YACpB,QAAQ,EAAE;gBACN;oBACI,QAAQ,EAAE,WAAW;oBACrB,UAAU,EAAE,GAAG,SAAS,MAAM;iBACjC;aACJ;YACD,OAAO,EAAE;gBACL,OAAO,EAAE,IAAI;gBACb,kBAAkB,EAAE,WAAW;gBAC/B,oBAAoB,EAAE,QAAQ,MAAM,MAAM;aAC7C;SACJ,CAAC;IACN,CAAC,CAAC,CAAC;IACH,MAAM,GAAG,GAAG;QACR,IAAI,EAAE,GAAG,MAAM,MAAM;QACrB,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;QAC1B,QAAQ,EAAE;YACN;gBACI,QAAQ,EAAE,mBAAmB;gBAC7B,UAAU,EAAE,QAAQ,MAAM,MAAM;aACnC;SACJ;KACJ,CAAC;IACF,OAAO;QACH,SAAS,EAAE;YACP;gBACI,IAAI,EAAE,WAAW;gBACjB,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;aAC7B;SACJ;QACD,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,GAAG,CAAC;KACV,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAuB;IAClD,QAAQ,EAAE,eAAe,CAAC,oBAAoB,EAAE,MAAM,CAAC;IACvD,QAAQ,EAAE,eAAe,CAAC,gBAAgB,EAAE,WAAW,CAAC;IACxD,IAAI,EAAE,QAAQ,CAAC,eAAe,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IACzD,QAAQ,EAAE,eAAe,CAAC,oBAAoB,EAAE,IAAI,CAAC;IACrD,QAAQ,EAAE,eAAe,CAAC,oBAAoB,EAAE,IAAI,CAAC;IACrD,KAAK,EAAE,eAAe,CAAC,cAAc,EAAE,GAAG,CAAC;CAC9C,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAgB;IAC/C,eAAe,EAAE,QAAQ,CACrB,eAAe,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAC3D;IACD,OAAO,EACH,eAAe,CAAC,qCAAqC,EAAE,OAAO,CAAC;QAC/D,MAAM;CACb,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAgB;IAChD,eAAe,EAAE,QAAQ,CACrB,eAAe,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAC5D;IACD,OAAO,EACH,eAAe,CAAC,sCAAsC,EAAE,OAAO,CAAC;QAChE,MAAM;CACb,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAmB;IAC5C,sBAAsB,EAAE,QAAQ,CAC5B,eAAe,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAC5D;IACD,0BAA0B,EAAE,QAAQ,CAChC,eAAe,CAAC,mCAAmC,EAAE,IAAI,CAAC,CAC7D;CACJ,CAAC","sourcesContent":["import { getEnvOrDefault } from '@republic-global/commons';\n\nimport type {\n    ChannelOpts,\n    ConnectionOpts,\n    MQConnectionConfig,\n    QueueTopology,\n} from './config.js';\n\nexport const CC_DIRECT_X = 'crowdcraft.direct';\n\nexport const crowdcraftQueueTopology = (\n    domain: string,\n    queueNames: string[]\n) => {\n    const queues = queueNames.map((queueName) => {\n        return {\n            name: `${queueName}`,\n            bindings: [\n                {\n                    exchange: CC_DIRECT_X,\n                    routingKey: `${queueName}.key`,\n                },\n            ],\n            options: {\n                durable: true,\n                deadLetterExchange: CC_DIRECT_X,\n                deadLetterRoutingKey: `dead.${domain}.key`,\n            },\n        };\n    });\n    const dlq = {\n        name: `${domain}.dlq`,\n        options: { durable: true },\n        bindings: [\n            {\n                exchange: 'crowdcraft.direct',\n                routingKey: `dead.${domain}.key`,\n            },\n        ],\n    };\n    return {\n        exchanges: [\n            {\n                name: CC_DIRECT_X,\n                type: 'direct',\n                options: { durable: true },\n            },\n        ],\n        queues: [...queues, dlq],\n    } as QueueTopology;\n};\n\nexport const mqConnectionConfig: MQConnectionConfig = {\n    protocol: getEnvOrDefault('RABBIT_MQ_PROTOCOL', 'amqp'),\n    hostname: getEnvOrDefault('RABBIT_MQ_HOST', 'localhost'),\n    port: parseInt(getEnvOrDefault('RABBIT_MQ_PORT', '5672')),\n    username: getEnvOrDefault('RABBIT_MQ_USERNAME', 'mq'),\n    password: getEnvOrDefault('RABBIT_MQ_PASSWORD', 'mq'),\n    vhost: getEnvOrDefault('RABBIT_VHOST', '/'),\n};\n\nexport const mqPublisherChannelOpts: ChannelOpts = {\n    maxChannelCount: parseInt(\n        getEnvOrDefault('RABBIT_MQ_PUBLISHER_MAX_CHANNELS', '2')\n    ),\n    confirm:\n        getEnvOrDefault('RABBIT_MQ_PUBLISHER_CONFIRM_CHANNEL', 'false') ===\n        'true',\n};\n\nexport const mqSubscriberChannelOpts: ChannelOpts = {\n    maxChannelCount: parseInt(\n        getEnvOrDefault('RABBIT_MQ_SUBSCRIBER_MAX_CHANNELS', '2')\n    ),\n    confirm:\n        getEnvOrDefault('RABBIT_MQ_SUBSCRIBER_CONFIRM_CHANNEL', 'false') ===\n        'true',\n};\n\nexport const mqConnectionOpts: ConnectionOpts = {\n    reconnectTimeInSeconds: parseInt(\n        getEnvOrDefault('RABBIT_MQ_SUBSCRIBER_MAX_CHANNELS', '5')\n    ),\n    heartbeatIntervalInSeconds: parseInt(\n        getEnvOrDefault('RABBIT_MQ_SUBSCRIBER_MAX_CHANNELS', '30')\n    ),\n};\n"]}