import { LoggerFactory } from '@republic-global/commons';
import { connect } from 'amqp-connection-manager';
import { ChannelManager } from './channel-manager.js';
import {} from './config.js';
import { initializeTopology } from './topology.js';
import { requireInitialization, validateAlreadyInitialized } from './util.js';
export class MQPublisher {
    opts;
    logger = LoggerFactory.getLogger('MQPublisher');
    connection;
    channelManager;
    initialized = false;
    constructor(opts) {
        this.opts = opts;
        this.connection = connect(opts.connectionConfig, opts.connectionOpts);
        this.connection.once('error', (error) => {
            this.logger.error(`Publisher connection error: ${error}`);
        });
        this.connection.once('close', (error) => {
            this.logger.error(`Publisher connection closed: ${error}`);
        });
        this.channelManager = new ChannelManager(this.connection, opts.channelOpts, 'publish');
    }
    async initialize() {
        validateAlreadyInitialized(this.initialized);
        await initializeTopology(this.connection, this.opts.topology);
        await this.channelManager.initialize();
        this.initialized = true;
    }
    async send(queueName, message) {
        requireInitialization(this.initialized);
        const channel = this.channelManager.pickChannel();
        await channel.sendToQueue(queueName, JSON.stringify(message));
    }
    async sendBatch(queueName, messages) {
        requireInitialization(this.initialized);
        try {
            await Promise.all(messages.map((message) => {
                const channel = this.channelManager.pickChannel();
                channel.sendToQueue(queueName, Buffer.from(JSON.stringify(message), 'utf-8'));
                this.logger.info(`Sent message via queue ${queueName}`);
            }));
        }
        catch (error) {
            this.logger.error(error);
            throw error;
        }
    }
    async dispose() {
        this.logger.info('Disposing MQ Publisher');
        await this.channelManager.close();
        await this.connection.close();
    }
}
//# sourceMappingURL=mq-publisher.js.map