{"version":3,"file":"mq-subscriber.js","sourceRoot":"","sources":["../../src/mq-subscriber.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoggerFactory } from '@republic-global/commons';\nimport {\n    type AmqpConnectionManager,\n    type ChannelWrapper,\n    connect,\n} from 'amqp-connection-manager';\nimport { type ConsumeMessage } from 'amqplib';\nimport type { Disposable } from 'tsyringe';\n\nimport { ChannelManager } from './channel-manager.js';\nimport { type MQSubscriberOpts } from './config.js';\nimport { initializeTopology } from './topology.js';\nimport { requireInitialization, validateAlreadyInitialized } from './util.js';\n\nexport class MQSubscriber implements Disposable {\n    private readonly logger = LoggerFactory.getLogger('MQConsumer');\n    private readonly connection: AmqpConnectionManager;\n    private readonly channelManager: ChannelManager;\n\n    private initialized = false;\n\n    constructor(private readonly opts: MQSubscriberOpts) {\n        this.connection = connect(opts.connectionConfig, opts.connectionOpts);\n        this.connection.once('error', (error) => {\n            this.logger.error(`Consumer connection error: ${error}`);\n        });\n\n        this.connection.once('close', (error) => {\n            this.logger.error(`Consumer connection closed: ${error}`);\n        });\n        this.channelManager = new ChannelManager(\n            this.connection,\n            opts.channelOpts,\n            'subscribe'\n        );\n    }\n\n    public async initialize() {\n        validateAlreadyInitialized(this.initialized);\n        await initializeTopology(this.connection, this.opts.topology);\n        await this.channelManager.initialize();\n        this.initialized = true;\n    }\n\n    public async registerSubscriber(\n        queueName: string,\n        messageConsumer: (message: unknown) => Promise<void>\n    ) {\n        requireInitialization(this.initialized);\n        this.logger.info(`Setting up a subscriber for queue ${queueName}`);\n        const channel = this.channelManager.pickChannel();\n\n        await channel.consume(queueName, async (message) => {\n            try {\n                const obj: unknown = JSON.parse(\n                    message.content.toString('utf-8')\n                );\n                this.logger.debug(\n                    `Received message from ${queueName} queue: ${JSON.stringify(obj)}`\n                );\n                await messageConsumer(obj);\n                channel.ack(message);\n            } catch (error) {\n                this.handleError(message, error, channel);\n            }\n        });\n    }\n\n    async dispose() {\n        this.logger.info('Disposing MQ Subscriber');\n        await this.channelManager.close();\n        await this.connection.close();\n    }\n\n    private handleError(\n        message: ConsumeMessage,\n        error: unknown,\n        channel: ChannelWrapper\n    ) {\n        this.logger.error('Error while consuming message', error);\n        this.logger.error('Sending nack for message', message);\n        channel.nack(message, false, false);\n    }\n}\n"]}