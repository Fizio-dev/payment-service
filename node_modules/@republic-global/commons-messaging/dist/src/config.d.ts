export interface MQPublisherOpts {
    connectionConfig: MQConnectionConfig;
    topology: QueueTopology;
    channelOpts: ChannelOpts;
    connectionOpts?: ConnectionOpts;
}
export interface MQSubscriberOpts {
    connectionConfig: MQConnectionConfig;
    topology: QueueTopology;
    channelOpts: ChannelOpts;
    connectionOpts?: ConnectionOpts;
}
export interface MQConnectionConfig {
    protocol: string;
    hostname: string;
    port: number;
    username: string;
    password: string;
    vhost: string;
}
export interface QueueTopology {
    queues: {
        name: string;
        bindings: {
            exchange: string;
            routingKey: string;
        }[];
        options?: {
            deadLetterExchange?: string;
            deadLetterRoutingKey?: string;
            durable?: boolean;
            arguments?: object;
        };
    }[];
    exchanges: {
        name: string;
        type: 'direct' | 'fanout' | 'topic' | 'headers';
        options?: {
            durable?: boolean;
        };
    }[];
    deadLetterExchanges?: {
        name: string;
        type: 'direct' | 'fanout' | 'topic' | 'headers';
        options?: object;
    }[];
}
export interface ChannelOpts {
    maxChannelCount: number;
    confirm: boolean;
}
export interface ConnectionOpts {
    reconnectTimeInSeconds: number;
    heartbeatIntervalInSeconds: number;
}
//# sourceMappingURL=config.d.ts.map