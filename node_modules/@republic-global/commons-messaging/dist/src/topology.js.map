{"version":3,"file":"topology.js","sourceRoot":"","sources":["../../src/topology.ts"],"names":[],"mappings":"AAKA,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EACnC,UAAiC,EACjC,IAAmB,EACrB,EAAE;IACA,MAAM,YAAY,GAAG,UAAU,CAAC,aAAa,CAAC;QAC1C,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,KAAK,EAAE,OAAgB,EAAE,EAAE;YAC9B,MAAM,OAAO,CAAC,GAAG,CACb,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CACxD,KAAK,EAAE,QAAQ,EAAE,EAAE;gBACf,MAAM,OAAO,CAAC,cAAc,CACxB,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,OAAO,CACnB,CAAC;YACN,CAAC,CACJ,CACJ,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CACb,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBAC5B,MAAM,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE;oBAClC,OAAO,EAAE,IAAI;oBACb,GAAG,KAAK,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,KAAK,MAAM,OAAO,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;oBACnC,MAAM,OAAO,CAAC,SAAS,CACnB,KAAK,CAAC,IAAI,EACV,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,UAAU,CACrB,CAAC;gBACN,CAAC;YACL,CAAC,CAAC,CACL,CAAC;QACN,CAAC;KACJ,CAAC,CAAC;IACH,MAAM,YAAY,CAAC,cAAc,EAAE,CAAC;IACpC,MAAM,YAAY,CAAC,KAAK,EAAE,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["import type { AmqpConnectionManager } from 'amqp-connection-manager';\nimport type { Channel } from 'amqplib';\n\nimport type { QueueTopology } from './config.js';\n\nexport const initializeTopology = async (\n    connection: AmqpConnectionManager,\n    opts: QueueTopology\n) => {\n    const setupChannel = connection.createChannel({\n        json: true,\n        setup: async (channel: Channel) => {\n            await Promise.all(\n                [...opts.exchanges, ...(opts.deadLetterExchanges || [])].map(\n                    async (exchange) => {\n                        await channel.assertExchange(\n                            exchange.name,\n                            exchange.type,\n                            exchange.options\n                        );\n                    }\n                )\n            );\n            await Promise.all(\n                opts.queues.map(async (queue) => {\n                    await channel.assertQueue(queue.name, {\n                        durable: true,\n                        ...queue.options,\n                    });\n                    for (const binding of queue.bindings) {\n                        await channel.bindQueue(\n                            queue.name,\n                            binding.exchange,\n                            binding.routingKey\n                        );\n                    }\n                })\n            );\n        },\n    });\n    await setupChannel.waitForConnect();\n    await setupChannel.close();\n};\n"]}